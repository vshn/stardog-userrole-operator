// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stardogapi "github.com/vshn/stardog-userrole-operator/pkg/stardogapi"
)

// MockStardogAPI is a mock of StardogAPI interface.
type MockStardogAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStardogAPIMockRecorder
}

// MockStardogAPIMockRecorder is the mock recorder for MockStardogAPI.
type MockStardogAPIMockRecorder struct {
	mock *MockStardogAPI
}

// NewMockStardogAPI creates a new mock instance.
func NewMockStardogAPI(ctrl *gomock.Controller) *MockStardogAPI {
	mock := &MockStardogAPI{ctrl: ctrl}
	mock.recorder = &MockStardogAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStardogAPI) EXPECT() *MockStardogAPIMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockStardogAPI) AddRole(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockStardogAPIMockRecorder) AddRole(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockStardogAPI)(nil).AddRole), ctx, name)
}

// AddRolePermission mocks base method.
func (m *MockStardogAPI) AddRolePermission(ctx context.Context, name string, permission stardogapi.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolePermission", ctx, name, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRolePermission indicates an expected call of AddRolePermission.
func (mr *MockStardogAPIMockRecorder) AddRolePermission(ctx, name, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolePermission", reflect.TypeOf((*MockStardogAPI)(nil).AddRolePermission), ctx, name, permission)
}

// AddUser mocks base method.
func (m *MockStardogAPI) AddUser(ctx context.Context, name, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, name, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStardogAPIMockRecorder) AddUser(ctx, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStardogAPI)(nil).AddUser), ctx, name, password)
}

// CreateDatabase mocks base method.
func (m *MockStardogAPI) CreateDatabase(ctx context.Context, name string, options map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockStardogAPIMockRecorder) CreateDatabase(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockStardogAPI)(nil).CreateDatabase), ctx, name, options)
}

// DeleteRole mocks base method.
func (m *MockStardogAPI) DeleteRole(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockStardogAPIMockRecorder) DeleteRole(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockStardogAPI)(nil).DeleteRole), ctx, name)
}

// DeleteRolePermission mocks base method.
func (m *MockStardogAPI) DeleteRolePermission(ctx context.Context, name string, permission stardogapi.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermission", ctx, name, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRolePermission indicates an expected call of DeleteRolePermission.
func (mr *MockStardogAPIMockRecorder) DeleteRolePermission(ctx, name, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermission", reflect.TypeOf((*MockStardogAPI)(nil).DeleteRolePermission), ctx, name, permission)
}

// DeleteUser mocks base method.
func (m *MockStardogAPI) DeleteUser(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStardogAPIMockRecorder) DeleteUser(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStardogAPI)(nil).DeleteUser), ctx, name)
}

// DropDatabase mocks base method.
func (m *MockStardogAPI) DropDatabase(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockStardogAPIMockRecorder) DropDatabase(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockStardogAPI)(nil).DropDatabase), ctx, name)
}

// GetRolePermissions mocks base method.
func (m *MockStardogAPI) GetRolePermissions(ctx context.Context, name string) ([]stardogapi.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermissions", ctx, name)
	ret0, _ := ret[0].([]stardogapi.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolePermissions indicates an expected call of GetRolePermissions.
func (mr *MockStardogAPIMockRecorder) GetRolePermissions(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermissions", reflect.TypeOf((*MockStardogAPI)(nil).GetRolePermissions), ctx, name)
}

// GetRoles mocks base method.
func (m *MockStardogAPI) GetRoles(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockStardogAPIMockRecorder) GetRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockStardogAPI)(nil).GetRoles), ctx)
}

// GetUser mocks base method.
func (m *MockStardogAPI) GetUser(ctx context.Context, name string) (stardogapi.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, name)
	ret0, _ := ret[0].(stardogapi.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStardogAPIMockRecorder) GetUser(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStardogAPI)(nil).GetUser), ctx, name)
}

// GetUserRoles mocks base method.
func (m *MockStardogAPI) GetUserRoles(ctx context.Context, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", ctx, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockStardogAPIMockRecorder) GetUserRoles(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockStardogAPI)(nil).GetUserRoles), ctx, name)
}

// ListDatabases mocks base method.
func (m *MockStardogAPI) ListDatabases(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockStardogAPIMockRecorder) ListDatabases(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockStardogAPI)(nil).ListDatabases), ctx)
}

// SetUserRoles mocks base method.
func (m *MockStardogAPI) SetUserRoles(ctx context.Context, name string, roles []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserRoles", ctx, name, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserRoles indicates an expected call of SetUserRoles.
func (mr *MockStardogAPIMockRecorder) SetUserRoles(ctx, name, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserRoles", reflect.TypeOf((*MockStardogAPI)(nil).SetUserRoles), ctx, name, roles)
}
