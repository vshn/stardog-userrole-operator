// Code generated by MockGen. DO NOT EDIT.
// Source: extended_interfaces.go

// Package stardogrestapi is a generated GoMock package.
package stardogrestapi

import (
	context "context"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
	stardogrest "github.com/vshn/stardog-userrole-operator/stardogrest"
	reflect "reflect"
)

// MockExtendedBaseClientAPI is a mock of ExtendedBaseClientAPI interface
type MockExtendedBaseClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedBaseClientAPIMockRecorder
}

// MockExtendedBaseClientAPIMockRecorder is the mock recorder for MockExtendedBaseClientAPI
type MockExtendedBaseClientAPIMockRecorder struct {
	mock *MockExtendedBaseClientAPI
}

// NewMockExtendedBaseClientAPI creates a new mock instance
func NewMockExtendedBaseClientAPI(ctrl *gomock.Controller) *MockExtendedBaseClientAPI {
	mock := &MockExtendedBaseClientAPI{ctrl: ctrl}
	mock.recorder = &MockExtendedBaseClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtendedBaseClientAPI) EXPECT() *MockExtendedBaseClientAPIMockRecorder {
	return m.recorder
}

// SetConnection mocks base method
func (m *MockExtendedBaseClientAPI) SetConnection(url, username, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnection", url, username, password)
}

// SetConnection indicates an expected call of SetConnection
func (mr *MockExtendedBaseClientAPIMockRecorder) SetConnection(url, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnection", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).SetConnection), url, username, password)
}

// AddRole mocks base method
func (m *MockExtendedBaseClientAPI) AddRole(ctx context.Context, userParameter string, role stardogrest.Rolename) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", ctx, userParameter, role)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRole indicates an expected call of AddRole
func (mr *MockExtendedBaseClientAPIMockRecorder) AddRole(ctx, userParameter, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).AddRole), ctx, userParameter, role)
}

// AddRolePermission mocks base method
func (m *MockExtendedBaseClientAPI) AddRolePermission(ctx context.Context, role string, permission stardogrest.Permission) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolePermission", ctx, role, permission)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRolePermission indicates an expected call of AddRolePermission
func (mr *MockExtendedBaseClientAPIMockRecorder) AddRolePermission(ctx, role, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolePermission", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).AddRolePermission), ctx, role, permission)
}

// AddUserPermission mocks base method
func (m *MockExtendedBaseClientAPI) AddUserPermission(ctx context.Context, userParameter string, permission stardogrest.Permission) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPermission", ctx, userParameter, permission)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserPermission indicates an expected call of AddUserPermission
func (mr *MockExtendedBaseClientAPIMockRecorder) AddUserPermission(ctx, userParameter, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPermission", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).AddUserPermission), ctx, userParameter, permission)
}

// ChangePassword mocks base method
func (m *MockExtendedBaseClientAPI) ChangePassword(ctx context.Context, userParameter string, password stardogrest.Password) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userParameter, password)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockExtendedBaseClientAPIMockRecorder) ChangePassword(ctx, userParameter, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ChangePassword), ctx, userParameter, password)
}

// CreateRole mocks base method
func (m *MockExtendedBaseClientAPI) CreateRole(ctx context.Context, role *stardogrest.Rolename) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockExtendedBaseClientAPIMockRecorder) CreateRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).CreateRole), ctx, role)
}

// CreateUser mocks base method
func (m *MockExtendedBaseClientAPI) CreateUser(ctx context.Context, userParameter *stardogrest.User) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userParameter)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockExtendedBaseClientAPIMockRecorder) CreateUser(ctx, userParameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).CreateUser), ctx, userParameter)
}

// IsEnabled mocks base method
func (m *MockExtendedBaseClientAPI) IsEnabled(ctx context.Context, userParameter string) (stardogrest.Enabled, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", ctx, userParameter)
	ret0, _ := ret[0].(stardogrest.Enabled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEnabled indicates an expected call of IsEnabled
func (mr *MockExtendedBaseClientAPIMockRecorder) IsEnabled(ctx, userParameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).IsEnabled), ctx, userParameter)
}

// IsSuperuser mocks base method
func (m *MockExtendedBaseClientAPI) IsSuperuser(ctx context.Context, userParameter string) (stardogrest.Superuser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuperuser", ctx, userParameter)
	ret0, _ := ret[0].(stardogrest.Superuser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSuperuser indicates an expected call of IsSuperuser
func (mr *MockExtendedBaseClientAPIMockRecorder) IsSuperuser(ctx, userParameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuperuser", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).IsSuperuser), ctx, userParameter)
}

// ListEffectivePermissions mocks base method
func (m *MockExtendedBaseClientAPI) ListEffectivePermissions(ctx context.Context, userParameter string) (stardogrest.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEffectivePermissions", ctx, userParameter)
	ret0, _ := ret[0].(stardogrest.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEffectivePermissions indicates an expected call of ListEffectivePermissions
func (mr *MockExtendedBaseClientAPIMockRecorder) ListEffectivePermissions(ctx, userParameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEffectivePermissions", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ListEffectivePermissions), ctx, userParameter)
}

// ListRolePermissions mocks base method
func (m *MockExtendedBaseClientAPI) ListRolePermissions(ctx context.Context, role string) (stardogrest.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolePermissions", ctx, role)
	ret0, _ := ret[0].(stardogrest.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolePermissions indicates an expected call of ListRolePermissions
func (mr *MockExtendedBaseClientAPIMockRecorder) ListRolePermissions(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolePermissions", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ListRolePermissions), ctx, role)
}

// ListRoles mocks base method
func (m *MockExtendedBaseClientAPI) ListRoles(ctx context.Context) (stardogrest.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx)
	ret0, _ := ret[0].(stardogrest.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles
func (mr *MockExtendedBaseClientAPIMockRecorder) ListRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ListRoles), ctx)
}

// ListRoleUsers mocks base method
func (m *MockExtendedBaseClientAPI) ListRoleUsers(ctx context.Context, role string) (stardogrest.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleUsers", ctx, role)
	ret0, _ := ret[0].(stardogrest.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleUsers indicates an expected call of ListRoleUsers
func (mr *MockExtendedBaseClientAPIMockRecorder) ListRoleUsers(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleUsers", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ListRoleUsers), ctx, role)
}

// ListUserPermissions mocks base method
func (m *MockExtendedBaseClientAPI) ListUserPermissions(ctx context.Context, userParameter string) (stardogrest.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserPermissions", ctx, userParameter)
	ret0, _ := ret[0].(stardogrest.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserPermissions indicates an expected call of ListUserPermissions
func (mr *MockExtendedBaseClientAPIMockRecorder) ListUserPermissions(ctx, userParameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPermissions", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ListUserPermissions), ctx, userParameter)
}

// ListUserRoles mocks base method
func (m *MockExtendedBaseClientAPI) ListUserRoles(ctx context.Context, userParameter string) (stardogrest.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRoles", ctx, userParameter)
	ret0, _ := ret[0].(stardogrest.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserRoles indicates an expected call of ListUserRoles
func (mr *MockExtendedBaseClientAPIMockRecorder) ListUserRoles(ctx, userParameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRoles", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ListUserRoles), ctx, userParameter)
}

// ListUsers mocks base method
func (m *MockExtendedBaseClientAPI) ListUsers(ctx context.Context) (stardogrest.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].(stardogrest.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockExtendedBaseClientAPIMockRecorder) ListUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ListUsers), ctx)
}

// PutRoles mocks base method
func (m *MockExtendedBaseClientAPI) PutRoles(ctx context.Context, userParameter string, roles stardogrest.Roles) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRoles", ctx, userParameter, roles)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRoles indicates an expected call of PutRoles
func (mr *MockExtendedBaseClientAPIMockRecorder) PutRoles(ctx, userParameter, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRoles", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).PutRoles), ctx, userParameter, roles)
}

// RemoveRole mocks base method
func (m *MockExtendedBaseClientAPI) RemoveRole(ctx context.Context, userParameter, role string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", ctx, userParameter, role)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRole indicates an expected call of RemoveRole
func (mr *MockExtendedBaseClientAPIMockRecorder) RemoveRole(ctx, userParameter, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).RemoveRole), ctx, userParameter, role)
}

// RemoveRole1 mocks base method
func (m *MockExtendedBaseClientAPI) RemoveRole1(ctx context.Context, role string, force *bool) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole1", ctx, role, force)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRole1 indicates an expected call of RemoveRole1
func (mr *MockExtendedBaseClientAPIMockRecorder) RemoveRole1(ctx, role, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole1", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).RemoveRole1), ctx, role, force)
}

// RemoveRolePermission mocks base method
func (m *MockExtendedBaseClientAPI) RemoveRolePermission(ctx context.Context, role string, permission stardogrest.Permission) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRolePermission", ctx, role, permission)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRolePermission indicates an expected call of RemoveRolePermission
func (mr *MockExtendedBaseClientAPIMockRecorder) RemoveRolePermission(ctx, role, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRolePermission", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).RemoveRolePermission), ctx, role, permission)
}

// RemoveUser mocks base method
func (m *MockExtendedBaseClientAPI) RemoveUser(ctx context.Context, userParameter string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", ctx, userParameter)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockExtendedBaseClientAPIMockRecorder) RemoveUser(ctx, userParameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).RemoveUser), ctx, userParameter)
}

// RemoveUserPermission mocks base method
func (m *MockExtendedBaseClientAPI) RemoveUserPermission(ctx context.Context, userParameter string, permission stardogrest.Permission) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserPermission", ctx, userParameter, permission)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserPermission indicates an expected call of RemoveUserPermission
func (mr *MockExtendedBaseClientAPIMockRecorder) RemoveUserPermission(ctx, userParameter, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserPermission", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).RemoveUserPermission), ctx, userParameter, permission)
}

// SetEnabled mocks base method
func (m *MockExtendedBaseClientAPI) SetEnabled(ctx context.Context, userParameter string, enable stardogrest.Enabled) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEnabled", ctx, userParameter, enable)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEnabled indicates an expected call of SetEnabled
func (mr *MockExtendedBaseClientAPIMockRecorder) SetEnabled(ctx, userParameter, enable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnabled", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).SetEnabled), ctx, userParameter, enable)
}

// ValidateUser mocks base method
func (m *MockExtendedBaseClientAPI) ValidateUser(ctx context.Context) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", ctx)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUser indicates an expected call of ValidateUser
func (mr *MockExtendedBaseClientAPIMockRecorder) ValidateUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockExtendedBaseClientAPI)(nil).ValidateUser), ctx)
}
