// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vshn/stardog-userrole-operator/stardogrest/models"
)

// IsEnabledReader is a Reader for the IsEnabled structure.
type IsEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIsEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewIsEnabledDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIsEnabledOK creates a IsEnabledOK with default headers values
func NewIsEnabledOK() *IsEnabledOK {
	return &IsEnabledOK{}
}

/*
IsEnabledOK describes a response with status code 200, with default header values.

Whether the user is enabled
*/
type IsEnabledOK struct {
	Payload *models.Enabled
}

// IsSuccess returns true when this is enabled o k response has a 2xx status code
func (o *IsEnabledOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this is enabled o k response has a 3xx status code
func (o *IsEnabledOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is enabled o k response has a 4xx status code
func (o *IsEnabledOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this is enabled o k response has a 5xx status code
func (o *IsEnabledOK) IsServerError() bool {
	return false
}

// IsCode returns true when this is enabled o k response a status code equal to that given
func (o *IsEnabledOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the is enabled o k response
func (o *IsEnabledOK) Code() int {
	return 200
}

func (o *IsEnabledOK) Error() string {
	return fmt.Sprintf("[GET /admin/users/{user}/enabled][%d] isEnabledOK  %+v", 200, o.Payload)
}

func (o *IsEnabledOK) String() string {
	return fmt.Sprintf("[GET /admin/users/{user}/enabled][%d] isEnabledOK  %+v", 200, o.Payload)
}

func (o *IsEnabledOK) GetPayload() *models.Enabled {
	return o.Payload
}

func (o *IsEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Enabled)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsEnabledDefault creates a IsEnabledDefault with default headers values
func NewIsEnabledDefault(code int) *IsEnabledDefault {
	return &IsEnabledDefault{
		_statusCode: code,
	}
}

/*
IsEnabledDefault describes a response with status code -1, with default header values.

unexpected error
*/
type IsEnabledDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this is enabled default response has a 2xx status code
func (o *IsEnabledDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this is enabled default response has a 3xx status code
func (o *IsEnabledDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this is enabled default response has a 4xx status code
func (o *IsEnabledDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this is enabled default response has a 5xx status code
func (o *IsEnabledDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this is enabled default response a status code equal to that given
func (o *IsEnabledDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the is enabled default response
func (o *IsEnabledDefault) Code() int {
	return o._statusCode
}

func (o *IsEnabledDefault) Error() string {
	return fmt.Sprintf("[GET /admin/users/{user}/enabled][%d] isEnabled default  %+v", o._statusCode, o.Payload)
}

func (o *IsEnabledDefault) String() string {
	return fmt.Sprintf("[GET /admin/users/{user}/enabled][%d] isEnabled default  %+v", o._statusCode, o.Payload)
}

func (o *IsEnabledDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *IsEnabledDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
