// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vshn/stardog-userrole-operator/stardogrest/models"
)

// NewSetEnabledParams creates a new SetEnabledParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSetEnabledParams() *SetEnabledParams {
	return &SetEnabledParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSetEnabledParamsWithTimeout creates a new SetEnabledParams object
// with the ability to set a timeout on a request.
func NewSetEnabledParamsWithTimeout(timeout time.Duration) *SetEnabledParams {
	return &SetEnabledParams{
		timeout: timeout,
	}
}

// NewSetEnabledParamsWithContext creates a new SetEnabledParams object
// with the ability to set a context for a request.
func NewSetEnabledParamsWithContext(ctx context.Context) *SetEnabledParams {
	return &SetEnabledParams{
		Context: ctx,
	}
}

// NewSetEnabledParamsWithHTTPClient creates a new SetEnabledParams object
// with the ability to set a custom HTTPClient for a request.
func NewSetEnabledParamsWithHTTPClient(client *http.Client) *SetEnabledParams {
	return &SetEnabledParams{
		HTTPClient: client,
	}
}

/*
SetEnabledParams contains all the parameters to send to the API endpoint

	for the set enabled operation.

	Typically these are written to a http.Request.
*/
type SetEnabledParams struct {

	/* Enable.

	   The enabled status
	*/
	Enable *models.Enabled

	/* User.

	   The username of the user whose status should be changed
	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the set enabled params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetEnabledParams) WithDefaults() *SetEnabledParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the set enabled params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetEnabledParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the set enabled params
func (o *SetEnabledParams) WithTimeout(timeout time.Duration) *SetEnabledParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set enabled params
func (o *SetEnabledParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set enabled params
func (o *SetEnabledParams) WithContext(ctx context.Context) *SetEnabledParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set enabled params
func (o *SetEnabledParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set enabled params
func (o *SetEnabledParams) WithHTTPClient(client *http.Client) *SetEnabledParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set enabled params
func (o *SetEnabledParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnable adds the enable to the set enabled params
func (o *SetEnabledParams) WithEnable(enable *models.Enabled) *SetEnabledParams {
	o.SetEnable(enable)
	return o
}

// SetEnable adds the enable to the set enabled params
func (o *SetEnabledParams) SetEnable(enable *models.Enabled) {
	o.Enable = enable
}

// WithUser adds the user to the set enabled params
func (o *SetEnabledParams) WithUser(user string) *SetEnabledParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the set enabled params
func (o *SetEnabledParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *SetEnabledParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Enable != nil {
		if err := r.SetBodyParam(o.Enable); err != nil {
			return err
		}
	}

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
