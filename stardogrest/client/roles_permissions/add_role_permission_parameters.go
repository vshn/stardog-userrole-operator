// Code generated by go-swagger; DO NOT EDIT.

package roles_permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vshn/stardog-userrole-operator/stardogrest/models"
)

// NewAddRolePermissionParams creates a new AddRolePermissionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddRolePermissionParams() *AddRolePermissionParams {
	return &AddRolePermissionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddRolePermissionParamsWithTimeout creates a new AddRolePermissionParams object
// with the ability to set a timeout on a request.
func NewAddRolePermissionParamsWithTimeout(timeout time.Duration) *AddRolePermissionParams {
	return &AddRolePermissionParams{
		timeout: timeout,
	}
}

// NewAddRolePermissionParamsWithContext creates a new AddRolePermissionParams object
// with the ability to set a context for a request.
func NewAddRolePermissionParamsWithContext(ctx context.Context) *AddRolePermissionParams {
	return &AddRolePermissionParams{
		Context: ctx,
	}
}

// NewAddRolePermissionParamsWithHTTPClient creates a new AddRolePermissionParams object
// with the ability to set a custom HTTPClient for a request.
func NewAddRolePermissionParamsWithHTTPClient(client *http.Client) *AddRolePermissionParams {
	return &AddRolePermissionParams{
		HTTPClient: client,
	}
}

/*
AddRolePermissionParams contains all the parameters to send to the API endpoint

	for the add role permission operation.

	Typically these are written to a http.Request.
*/
type AddRolePermissionParams struct {

	/* Permission.

	   The permission to add
	*/
	Permission *models.Permission

	/* Role.

	   The role to add the permission to
	*/
	Role string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add role permission params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddRolePermissionParams) WithDefaults() *AddRolePermissionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add role permission params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddRolePermissionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add role permission params
func (o *AddRolePermissionParams) WithTimeout(timeout time.Duration) *AddRolePermissionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add role permission params
func (o *AddRolePermissionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add role permission params
func (o *AddRolePermissionParams) WithContext(ctx context.Context) *AddRolePermissionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add role permission params
func (o *AddRolePermissionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add role permission params
func (o *AddRolePermissionParams) WithHTTPClient(client *http.Client) *AddRolePermissionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add role permission params
func (o *AddRolePermissionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPermission adds the permission to the add role permission params
func (o *AddRolePermissionParams) WithPermission(permission *models.Permission) *AddRolePermissionParams {
	o.SetPermission(permission)
	return o
}

// SetPermission adds the permission to the add role permission params
func (o *AddRolePermissionParams) SetPermission(permission *models.Permission) {
	o.Permission = permission
}

// WithRole adds the role to the add role permission params
func (o *AddRolePermissionParams) WithRole(role string) *AddRolePermissionParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the add role permission params
func (o *AddRolePermissionParams) SetRole(role string) {
	o.Role = role
}

// WriteToRequest writes these params to a swagger request
func (o *AddRolePermissionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Permission != nil {
		if err := r.SetBodyParam(o.Permission); err != nil {
			return err
		}
	}

	// path param role
	if err := r.SetPathParam("role", o.Role); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
