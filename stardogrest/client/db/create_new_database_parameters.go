// Code generated by go-swagger; DO NOT EDIT.

package db

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateNewDatabaseParams creates a new CreateNewDatabaseParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateNewDatabaseParams() *CreateNewDatabaseParams {
	return &CreateNewDatabaseParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateNewDatabaseParamsWithTimeout creates a new CreateNewDatabaseParams object
// with the ability to set a timeout on a request.
func NewCreateNewDatabaseParamsWithTimeout(timeout time.Duration) *CreateNewDatabaseParams {
	return &CreateNewDatabaseParams{
		timeout: timeout,
	}
}

// NewCreateNewDatabaseParamsWithContext creates a new CreateNewDatabaseParams object
// with the ability to set a context for a request.
func NewCreateNewDatabaseParamsWithContext(ctx context.Context) *CreateNewDatabaseParams {
	return &CreateNewDatabaseParams{
		Context: ctx,
	}
}

// NewCreateNewDatabaseParamsWithHTTPClient creates a new CreateNewDatabaseParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateNewDatabaseParamsWithHTTPClient(client *http.Client) *CreateNewDatabaseParams {
	return &CreateNewDatabaseParams{
		HTTPClient: client,
	}
}

/*
CreateNewDatabaseParams contains all the parameters to send to the API endpoint

	for the create new database operation.

	Typically these are written to a http.Request.
*/
type CreateNewDatabaseParams struct {

	/* Root.

	   The database to create.
	*/
	Root string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create new database params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateNewDatabaseParams) WithDefaults() *CreateNewDatabaseParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create new database params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateNewDatabaseParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create new database params
func (o *CreateNewDatabaseParams) WithTimeout(timeout time.Duration) *CreateNewDatabaseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create new database params
func (o *CreateNewDatabaseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create new database params
func (o *CreateNewDatabaseParams) WithContext(ctx context.Context) *CreateNewDatabaseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create new database params
func (o *CreateNewDatabaseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create new database params
func (o *CreateNewDatabaseParams) WithHTTPClient(client *http.Client) *CreateNewDatabaseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create new database params
func (o *CreateNewDatabaseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRoot adds the root to the create new database params
func (o *CreateNewDatabaseParams) WithRoot(root string) *CreateNewDatabaseParams {
	o.SetRoot(root)
	return o
}

// SetRoot adds the root to the create new database params
func (o *CreateNewDatabaseParams) SetRoot(root string) {
	o.Root = root
}

// WriteToRequest writes these params to a swagger request
func (o *CreateNewDatabaseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param root
	frRoot := o.Root
	fRoot := frRoot
	if fRoot != "" {
		if err := r.SetFormParam("root", fRoot); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
