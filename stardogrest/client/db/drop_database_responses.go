// Code generated by go-swagger; DO NOT EDIT.

package db

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vshn/stardog-userrole-operator/stardogrest/models"
)

// DropDatabaseReader is a Reader for the DropDatabase structure.
type DropDatabaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DropDatabaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDropDatabaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDropDatabaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDropDatabaseOK creates a DropDatabaseOK with default headers values
func NewDropDatabaseOK() *DropDatabaseOK {
	return &DropDatabaseOK{}
}

/*
DropDatabaseOK describes a response with status code 200, with default header values.

A dict containing an array of usernames
*/
type DropDatabaseOK struct {
	Payload *models.Generic
}

// IsSuccess returns true when this drop database o k response has a 2xx status code
func (o *DropDatabaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this drop database o k response has a 3xx status code
func (o *DropDatabaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this drop database o k response has a 4xx status code
func (o *DropDatabaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this drop database o k response has a 5xx status code
func (o *DropDatabaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this drop database o k response a status code equal to that given
func (o *DropDatabaseOK) IsCode(code int) bool {
	return code == 200
}

func (o *DropDatabaseOK) Error() string {
	return fmt.Sprintf("[DELETE /databases/{db}][%d] dropDatabaseOK  %+v", 200, o.Payload)
}

func (o *DropDatabaseOK) String() string {
	return fmt.Sprintf("[DELETE /databases/{db}][%d] dropDatabaseOK  %+v", 200, o.Payload)
}

func (o *DropDatabaseOK) GetPayload() *models.Generic {
	return o.Payload
}

func (o *DropDatabaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Generic)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDropDatabaseNotFound creates a DropDatabaseNotFound with default headers values
func NewDropDatabaseNotFound() *DropDatabaseNotFound {
	return &DropDatabaseNotFound{}
}

/*
DropDatabaseNotFound describes a response with status code 404, with default header values.

Database does not exist
*/
type DropDatabaseNotFound struct {
	Payload *models.DBMissing
}

// IsSuccess returns true when this drop database not found response has a 2xx status code
func (o *DropDatabaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this drop database not found response has a 3xx status code
func (o *DropDatabaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this drop database not found response has a 4xx status code
func (o *DropDatabaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this drop database not found response has a 5xx status code
func (o *DropDatabaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this drop database not found response a status code equal to that given
func (o *DropDatabaseNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DropDatabaseNotFound) Error() string {
	return fmt.Sprintf("[DELETE /databases/{db}][%d] dropDatabaseNotFound  %+v", 404, o.Payload)
}

func (o *DropDatabaseNotFound) String() string {
	return fmt.Sprintf("[DELETE /databases/{db}][%d] dropDatabaseNotFound  %+v", 404, o.Payload)
}

func (o *DropDatabaseNotFound) GetPayload() *models.DBMissing {
	return o.Payload
}

func (o *DropDatabaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DBMissing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
