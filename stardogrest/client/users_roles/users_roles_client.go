// Code generated by go-swagger; DO NOT EDIT.

package users_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddRole(params *AddRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRoleNoContent, error)

	ListRoleUsers(params *ListRoleUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRoleUsersOK, error)

	ListUserRoles(params *ListUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserRolesOK, error)

	PutRoles(params *PutRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutRolesOK, error)

	RemoveRoleOfUser(params *RemoveRoleOfUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveRoleOfUserNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddRole adds a role to a user
*/
func (a *Client) AddRole(params *AddRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRole",
		Method:             "POST",
		PathPattern:        "/users/{user}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddRoleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListRoleUsers lists the users with the given role
*/
func (a *Client) ListRoleUsers(params *ListRoleUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRoleUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRoleUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRoleUsers",
		Method:             "GET",
		PathPattern:        "/roles/{role}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRoleUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRoleUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRoleUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListUserRoles lists the users roles
*/
func (a *Client) ListUserRoles(params *ListUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUserRoles",
		Method:             "GET",
		PathPattern:        "/users/{user}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUserRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutRoles sets the roles of a user
*/
func (a *Client) PutRoles(params *PutRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putRoles",
		Method:             "PUT",
		PathPattern:        "/users/{user}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveRoleOfUser removes a role from a user
*/
func (a *Client) RemoveRoleOfUser(params *RemoveRoleOfUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveRoleOfUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveRoleOfUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeRoleOfUser",
		Method:             "DELETE",
		PathPattern:        "/users/{user}/roles/{role}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveRoleOfUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveRoleOfUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveRoleOfUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
