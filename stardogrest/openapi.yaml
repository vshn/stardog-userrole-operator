openapi: 3.0.1
info:
  title: Stardog HTTP API
  description: |
    # Overview
    Stardog supports the standard SPARQL Protocol HTTP bindings, as well as additional functionality via HTTP.
    Stardog also supports SPARQL 1.1â€™s Service Description format. See the [spec](https://www.w3.org/TR/sparql11-service-description/) if you want details.
    ### Generating URLs
    If you are running the HTTP server at

     ```http://localhost:12345```

    To form the URI of a particular Stardog Database, the Database Short Name is the first URL path segment appended to the deployment URI. For example, for the Database called `cytwombly`, deployed in the above example HTTP server, the Database Network Name might be

    ```http://localhost:12345/cytwombly```

    All the resources related to this database are identified by URL path segments relative to the Database Network Name; hence:

    ```http://localhost:12345/cytwombly/size```
    # Error Codes
    Here are explanations of what the various error codes mean:

    Error Code | Category | Meaning
    -----------|----------|---------
    000012 | GENERIC |UNKNOWN
    000IA2 | GENERIC |ILLEGAL_ARGUMENT
    000SD4 | GENERIC |SHUTTING_DOWN
    00PCE2 | GENERIC |PROCESS_CANCELLED
    00PE2 | GENERIC |PROCESS_EXISTS
    00PNE2 | GENERIC |PROCESS_NOT_FOUND
    00UOE2 | GENERIC |UNSUPPORTED_OPERATION
    0D0012 | DATABASE |UNKNOWN_DATABASE_EXCEPTION
    0D0CE3 | DATABASE |DATABASE_CONSISTENCY_EXCEPTION
    0D0DC2 | DATABASE |DATABASE_CONFLICT
    0D0DE2 | DATABASE |DATABASE_EXISTS
    0D0DU2 | DATABASE |DATABASE_UNKNOWN
    0D0TU2 | DATABASE |TRANSACTION_UNKNOWN
    0DICC2 | DATABASE |INVALID_CONFIGURATION
    0DIDN2 | DATABASE |INVALID_DATABASE_NAME
    0DIDS2 | DATABASE |INVALID_DATABASE_STATE
    BIUDE2 | BITES |MISSING_DOCUMENT
    CLNIC3 | CLUSTER_ERROR |NOT_IN_CLUSTER
    CLOEF3 | CLUSTER_ERROR |EXPEL_FAILED
    HS0012 | HTTP |UNKNOWN_CONNECTION_EXCEPTION
    HSJSE2 | HTTP |JSON_SYNTAX_EXCEPTION
    HSJSO2 | HTTP |JSON_EXCEPTION
    HSSSL3 | HTTP |SSL_EXCEPTION
    QE0012 | QUERY_EXECUTION |UNKNOWN_QUERY_EXCEPTION
    QE0FE2 | QUERY_EXECUTION |FUNCTION_EXISTS
    QE0PE2 | QUERY_EXECUTION |PARSE_EXCEPTION
    QE0QE2 | QUERY_EXECUTION |QUERY_EXISTS
    QECTP2 | QUERY_EXECUTION |CANNOT_TRANSLATE_PLAN
    QEFNF2 | QUERY_EXECUTION |FUNCTION_NOT_FOUND
    QEIQT2 | QUERY_EXECUTION |INVALID_QUERY_TYPE
    QEIVR2 | QUERY_EXECUTION |INVALID_RDF
    QEMAQ2 | QUERY_EXECUTION |MALFORMED_QUERY
    QEONS2 | QUERY_EXECUTION |OPERATION_NOT_SUPPORTED
    QEQNF2 | QUERY_EXECUTION |QUERY_NOT_FOUND
    QEQOE2 | QUERY_EXECUTION |OPERATOR_EXCEPTION
    QEQPE2 | QUERY_EXECUTION |QUERY_PARSE_EXCEPTION
    QEWCE2 | QUERY_EXECUTION |WRITE_CONFLICT_EXCEPTION
    SE0012 | SECURITY |UNKNOWN_SECURITY_EXCEPTION
    SE0IP2 | SECURITY |ILLEGAL_PASSWORD
    SE0RE2 | SECURITY |SECURITY_RESOURCE_EXISTS
    SEAEE2 | SECURITY |AUTHENTICATION_EXCEPTION
    SEAOE2 | SECURITY |AUTHORIZATION_EXCEPTION
    SEIPT2 | SECURITY |INCORRECT_PRINCIPAL_TRANSACTION
    SERIU2 | SECURITY |SECURITY_RESOURCE_IN_USE
    SERNF2 | SECURITY |SECURITY_RESOURCE_NOT_FOUND
    SERNI2 | SECURITY |SECURITY_RESOURCE_NAME_INVALID
    SERTI2 | SECURITY |SECURITY_RESOURCE_TYPE_INVALID
    ZK0013 | ZOOKEEPER_ERROR |ZOOKEEPER_UNKNOWN_EXCEPTION
    ZK00U3 | ZOOKEEPER_ERROR |UNIMPLEMENTED
    ZK0AE3 | ZOOKEEPER_ERROR |API_ERROR
    ZK0AF3 | ZOOKEEPER_ERROR |AUTH_FAILED
    ZK0BV3 | ZOOKEEPER_ERROR |BAD_VERSION
    ZK0CE3 | ZOOKEEPER_ERROR |NO_CHILDREN_FOR_EPHEMERAL
    ZK0CL3 | ZOOKEEPER_ERROR |CONNECTION_LOSS
    ZK0CR3 | ZOOKEEPER_ERROR |ZOOKEEPER_CONNECTION_REFUSED
    ZK0DI3 | ZOOKEEPER_ERROR |DATA_INCONSISTENCY
    ZK0IA3 | ZOOKEEPER_ERROR |BAD_ARGUMENTS
    ZK0ME3 | ZOOKEEPER_ERROR |MARSHALLING_ERROR
    ZK0NA3 | ZOOKEEPER_ERROR |NO_AUTH
    ZK0NE3 | ZOOKEEPER_ERROR |NODE_EXISTS
    ZK0NN3 | ZOOKEEPER_ERROR |NO_NODE
    ZK0OT3 | ZOOKEEPER_ERROR |OPERATION_TIMEOUT
    ZK0RI3 | ZOOKEEPER_ERROR |RUNTIME_INCONSISTENCY
    ZK0SE3 | ZOOKEEPER_ERROR |SYSTEM_ERROR
    ZK0SM3 | ZOOKEEPER_ERROR |SESSION_MOVED
    ZKEXS3 | ZOOKEEPER_ERROR |SESSION_EXPIRED
    ZKIAL3 | ZOOKEEPER_ERROR |INVALIDACL
    ZKICB3 | ZOOKEEPER_ERROR |INVALID_CALLBACK
    ZKNEY3 | ZOOKEEPER_ERROR |NOT_EMPTY
    ZKNRO3 | ZOOKEEPER_ERROR |NOT_READONLY
  contact:
    url: 'https://stardog.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
  version: 9.0.1
  x-logo:
    url: 'https://d33wubrfki0l68.cloudfront.net/66e9dcff51317cfc11b9f3d4ce2917a11ba81681/543c1/img/stardog-logo-optimized.svg'
externalDocs:
  url: 'https://docs.stardog.com'
servers:
  - url: 'http://localhost:5820'
tags:
  - name: Checkpoints
    description: Operations for database checkpoints
  - name: Permissions
    description: Operations on system permissions
  - name: Server Status/Metrics
    description: ''
  - name: Queries
    description: Operations relating to queries running on the server
  - name: Users
    description: Operations on system users
  - name: DB Admin
    description: Database administration operations
  - name: Roles
    description: Operations on system roles
  - name: Monitoring
    description: Operations relating to monitoring processes on the server
  - name: Stored Functions
    description: Operations relating to user-defined functions stored on the server
  - name: Server Admin
    description: Server administration operations. May require superuser permissions
  - name: Integrity Constraints / SHACL
    description: ''
  - name: Virtual Graphs External Compute
    description: Operations for virtualizing structured data on external compute engines
  - name: Data Caching
    description: Operations for working with cached data
  - name: Graph Store Protocol
    description: 'Operations on named graphs as detailed in https://www.w3.org/TR/sparql11-http-rdf-update/'
  - name: 'Matcher, aligning schemas from various data sources'
    description: ''
  - name: Reasoning
    description: Operations for interacting with the inference engine
  - name: Transactions
    description: Transactional operations
  - name: Data Sources
    description: 'Operations for managing data sources, which are used by virtual graphs'
  - name: GraphQL
    description: GraphQL Queries
  - name: SPARQL
    description: SPARQL Update Queries
  - name: Virtual Graphs
    description: Operations for virtualizing structured data
  - name: BITES
    description: 'Operations for BITES, the unstructured data service'
  - name: Cluster Admin
    description: Cluster administration operations
paths:
  '/admin/checkpoint/{db}/{checkpoint}':
    put:
      tags:
        - Checkpoints
      summary: Restore checkpoints
      operationId: restoreCheckpoint
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: checkpoint
          in: path
          description: the name of the checkpoint
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/CHECKPOINT_RESTORE'
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/checkpoint/{db}':
    get:
      tags:
        - Checkpoints
      summary: List checkpoints
      operationId: listCheckpoints
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/CHECKPOINT_LIST'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - Checkpoints
      summary: Create checkpoint
      operationId: createCheckpoint
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/CHECKPOINT_CREATE'
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/permissions/effective/user/{user}':
    get:
      tags:
        - Permissions
      summary: Get effective user permissions
      description: Get all permissions assigned to a given user as well as those granted by assigned roles
      operationId: getEffectiveUserPermissions
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/permissions/role/{role}/delete':
    post:
      tags:
        - Permissions
      summary: Delete Role Permission
      description: Remove a permission from a given role
      operationId: deleteRolePermission
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission removed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/permissions/role/{role}':
    get:
      tags:
        - Permissions
      summary: Get role permissions
      description: Get all permissions attributed to a given role
      operationId: getRolePermissions
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
    put:
      tags:
        - Permissions
      summary: Add Role Permission
      description: Add a permission to a specified role
      operationId: addRolePermission
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/permissions/user/{user}':
    get:
      tags:
        - Permissions
      summary: Get user permissions
      description: Get all permissions assigned to a given user
      operationId: getUserPermissions
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    put:
      tags:
        - Permissions
      summary: Add User Permission
      description: Grant a permission directly to a specified user
      operationId: addUserPermission
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/permissions/user/{user}/delete':
    post:
      tags:
        - Permissions
      summary: Delete User Permission
      description: Revoke a permission from a given user
      operationId: deleteUserPermission
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission removed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  /admin/status:
    get:
      tags:
        - Server Status/Metrics
      summary: Get Server/Database metrics
      description: 'Return metric information from the registry in JSON format. If ''admin'' is replaced in the path with a valid database name, metrics for just that database will be returned.'
      operationId: status
      responses:
        '200':
          description: Server/Database metrics
          content:
            application/json: {}
  /admin/status/prometheus:
    get:
      tags:
        - Server Status/Metrics
      summary: Get Prometheus metrics
      description: Return metric information from the registry in Prometheus format
      operationId: prometheus
      parameters:
        - name: include
          in: query
          description: Regex used to match metric names to be included
          schema:
            type: string
        - name: exclude
          in: query
          description: 'Regex used to match metric names to be excluded, takes precedence over include'
          schema:
            type: string
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain: {}
  /admin/status/prometheus/internal:
    get:
      tags:
        - Server Status/Metrics
      summary: Get Prometheus metrics (only accessible from a restricted cidr range)
      description: Return metric information from the registry in Prometheus format
      operationId: prometheusInternal
      parameters:
        - name: include
          in: query
          description: Regex used to match metric names to be included
          schema:
            type: string
        - name: exclude
          in: query
          description: 'Regex used to match metric names to be excluded, takes precedence over include'
          schema:
            type: string
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain: {}
  '/admin/queries/{name}':
    get:
      tags:
        - Queries
      summary: Get query
      description: Get details of a specific query
      operationId: getQuery
      parameters:
        - $ref: '#/components/parameters/name_query'
        - name: plan
          in: query
          schema:
            type: string
        - name: verbose
          in: query
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PROCESS'
        '404':
          $ref: '#/components/responses/NAME_QUERY_404'
    delete:
      tags:
        - Queries
      summary: Kill query
      operationId: killQuery
      parameters:
        - $ref: '#/components/parameters/name_query'
      responses:
        '204':
          description: Query killed
        '404':
          $ref: '#/components/responses/NAME_QUERY_404'
  /admin/queries:
    get:
      tags:
        - Queries
      summary: List queries
      description: Get a list of all running queries
      operationId: listQueries
      responses:
        '200':
          $ref: '#/components/responses/QUERY_LIST'
  /admin/queries/stored:
    get:
      tags:
        - Queries
      summary: List stored queries
      operationId: listStoredQueries
      responses:
        '200':
          $ref: '#/components/responses/STORED_QUERIES'
    put:
      tags:
        - Queries
      summary: Update stored query
      description: 'Add stored query, overwriting if a query with that name already exists'
      operationId: updateStoredQuery
      requestBody:
        $ref: '#/components/requestBodies/STORED_QUERY'
      responses:
        '204':
          description: Stored query updated
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
    post:
      tags:
        - Queries
      summary: Add stored query
      operationId: addStoredQuery
      requestBody:
        $ref: '#/components/requestBodies/STORED_QUERY'
      responses:
        '204':
          description: Stored query added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '422':
          description: Stored query already exists
    delete:
      tags:
        - Queries
      summary: Delete all stored queries
      operationId: clearAllStoredQueries
      responses:
        '204':
          description: All stored queries deleted
  '/admin/queries/stored/{name}':
    get:
      tags:
        - Queries
      summary: Get stored query
      operationId: getStoredQuery
      parameters:
        - $ref: '#/components/parameters/name_stored_query'
      responses:
        '200':
          $ref: '#/components/responses/STORED_QUERIES'
        '404':
          $ref: '#/components/responses/NAME_STORED_QUERY_404'
    post:
      tags:
        - Queries
      summary: Rename stored query
      operationId: renameStoredQuery
      parameters:
        - $ref: '#/components/parameters/name_stored_query'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GENERIC_NAME'
        required: true
      responses:
        '204':
          description: Query renamed
        '404':
          $ref: '#/components/responses/NAME_STORED_QUERY_404'
    delete:
      tags:
        - Queries
      summary: Delete stored query
      operationId: deleteStoredQuery
      parameters:
        - $ref: '#/components/parameters/name_stored_query'
      responses:
        '204':
          description: Query deleted
        '404':
          $ref: '#/components/responses/NAME_STORED_QUERY_404'
  '/admin/users/{user}/superuser':
    get:
      tags:
        - Users
      summary: User is Superuser
      description: Return whether or not a user is a Superuser
      operationId: isSuper
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SUPERUSER'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  /admin/users:
    get:
      tags:
        - Users
      summary: List users
      operationId: listUsers
      responses:
        '200':
          $ref: '#/components/responses/USER_LIST'
    post:
      tags:
        - Users
      summary: Add user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/USER_CREATE'
      responses:
        '201':
          description: User created
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
  '/admin/users/{user}/roles/{role}':
    delete:
      tags:
        - Users
      summary: Remove role from user
      operationId: removeUserRole
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
        - name: role
          $ref: '#/components/parameters/role'
      responses:
        '204':
          description: Role successfully removed
        '404':
          description: User/Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/users/{user}/pwd':
    put:
      tags:
        - Users
      summary: Change user's password
      operationId: changePassword
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/USER_PASSWD'
        required: true
      responses:
        '200':
          description: Password successfully changed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  /admin/users/list:
    get:
      tags:
        - Users
      summary: 'List users with attributes, roles and permissions'
      description: Retrieve a list of all roles explicitly assigned to a user
      operationId: listUsersDetailed
      responses:
        '200':
          $ref: '#/components/responses/USER_LIST_DETAILED'
  '/admin/users/{user}/enabled':
    get:
      tags:
        - Users
      summary: User enabled
      description: Return whether or not a user is enabled (active) in the system
      operationId: userEnabled
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ENABLED'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    put:
      tags:
        - Users
      summary: Enable/Disable User
      operationId: setUserEnabled
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ENABLED'
        required: true
      responses:
        '200':
          description: Flag set
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/users/{user}':
    get:
      tags:
        - Users
      summary: Get User
      description: 'Retrieve attributes, roles, and permissions of a User'
      operationId: getUser
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/USER'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    delete:
      tags:
        - Users
      summary: Delete User
      operationId: deleteUser
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '204':
          description: User deleted
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/users/{user}/roles':
    get:
      tags:
        - Users
      summary: Get user's roles
      description: Retrieve a list of all roles explicitly assigned to a user
      operationId: getUserRoles
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/ROLE_LIST'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    put:
      tags:
        - Users
      summary: Set user's roles
      description: Overwrite the list of roles explicitly assigned to a user
      operationId: setUserRoles
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ROLE_LIST'
        required: true
      responses:
        '200':
          description: Roles successfully updated
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    post:
      tags:
        - Users
      summary: Add role to user
      operationId: addUserRole
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/ROLENAME'
      responses:
        '204':
          description: Role successfully added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/databases/{db}/backup':
    put:
      tags:
        - DB Admin
      summary: Backup a database
      description: Create a backup of a database on the server
      operationId: backupDatabase
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: to
          in: query
          description: File location on the server to which to save the backup (defaults to $STARDOG_HOME/.backup)
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/databases/options:
    get:
      tags:
        - DB Admin
      summary: Return all databases along with their configuration options
      description: List all the databases in the server including all database configuration options
      operationId: listDatabasesWithOptions
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              example: |-
                { DATABASE_LIST = [{
                  "database.name": "db1",
                  "query.all.graphs": true
                },
                  "database.name": "db2",
                  "query.all.graphs": true
                }]}
  /admin/config_properties:
    get:
      tags:
        - DB Admin
      summary: Get all metadata properties
      description: 'Get information on all database metadata properties, including description and example values'
      operationId: getAllMetaProperties
      responses:
        '200':
          description: JSON object detailing all metadata options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON_CONFIG_PROPERTIES'
  /admin/properties:
    get:
      tags:
        - DB Admin
      summary: Get server properties
      description: Get the value of any set server-level properties
      operationId: getServerProperty
      parameters:
        - name: name
          in: query
          description: Specific names of server properties to retrieve (multiple params can be specified)
          schema:
            type: string
      responses:
        '200':
          description: JSON object detailing all server properties
          content:
            application/json: {}
    post:
      tags:
        - DB Admin
      summary: Set server properties
      description: Set the value of specific server properties
      operationId: setServerProperty
      requestBody:
        description: A JSON object with keys and values equal to the desired server properties
        content:
          application/json:
            example:
              query.plan.reuse: ALWAYS
              logging.access.enabled: true
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/online':
    put:
      tags:
        - DB Admin
      summary: Online database
      description: Bring a database online
      operationId: onlineDatabase
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        $ref: '#/components/requestBodies/DB_OFFLINE_ONLINE'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/databases/backup_all:
    put:
      tags:
        - DB Admin
      summary: Backup all databases
      description: Create a backup of all databases on the server
      operationId: backupAllDatabases
      parameters:
        - name: to
          in: query
          description: File location on the server to which to save the backups (defaults to $STARDOG_HOME/.backup)
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/optimize':
    put:
      tags:
        - DB Admin
      summary: Optimize database
      description: Optimize a database
      operationId: optimizeDatabase
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: Configuration parameters
        content:
          application/json: {}
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/databases:
    get:
      tags:
        - DB Admin
      summary: List databases
      description: List all the databases in the server
      operationId: listDatabases
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DATABASE_LIST'
    post:
      tags:
        - DB Admin
      summary: Create database
      description: 'Add a new database to the server, optionally with RDF bulk-loaded'
      operationId: createNewDatabase
      requestBody:
        description: A multipart request with a JSON root element and optionally RDF file contents
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DB_CREATE'
      responses:
        '201':
          description: Database created
        '400':
          description: Invalid or malformed request body
  '/admin/databases/{db}/options':
    get:
      tags:
        - DB Admin
      summary: Get all DB options
      description: Get the value of every metadata option for a database
      operationId: getAllDatabaseOptions
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: JSON object detailing all database metadata
          content:
            application/json: {}
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    put:
      tags:
        - DB Admin
      summary: Get DB options
      description: Get the value of specific metadata options for a database
      operationId: getDatabaseOptions
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/json:
            example:
              spatial.result.limit: null
              query.all.graphs: null
        required: true
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              example:
                spatial.result.limit: 10000
                query.all.graphs: true
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - DB Admin
      summary: Set DB options
      description: Set the value of specific metadata options for a database
      operationId: setDatabaseOption
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: A JSON object with keys and values equal to the desired metadata options
        content:
          application/json:
            example:
              spatial.result.limit: 10000
              query.all.graphs: true
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/databases/{db}':
    delete:
      tags:
        - DB Admin
      summary: Drop database
      description: Delete the database
      operationId: dropDatabase
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/databases/{db}/repair':
    post:
      tags:
        - DB Admin
      summary: Repair database
      description: Attempt to recover a corrupted database
      operationId: repairDatabase
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/restore:
    put:
      tags:
        - DB Admin
      summary: Restore database
      description: Restore a database from backup
      operationId: restoreDatabase
      parameters:
        - name: from
          in: query
          description: The location on the server of the backup
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Whether or not to overwrite an existing database with this backup
          schema:
            type: boolean
        - name: name
          in: query
          description: 'The name of the restored database, if different'
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/offline':
    put:
      tags:
        - DB Admin
      summary: Offline database
      description: Take a database offline
      operationId: offlineDatabase
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        $ref: '#/components/requestBodies/DB_OFFLINE_ONLINE'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/roles/list:
    get:
      tags:
        - Roles
      summary: List Roles with their permissions
      description: Get the names of all roles in the system
      operationId: listRolesDetailed
      responses:
        '200':
          $ref: '#/components/responses/ROLE_LIST_DETAILED'
  '/admin/roles/{role}':
    delete:
      tags:
        - Roles
      summary: Delete role
      operationId: deleteRole
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
        - name: force
          in: query
          description: Whether to force delete if role is assigned to users
          schema:
            type: boolean
      responses:
        '204':
          description: Role deleted
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/roles/{role}/users':
    get:
      tags:
        - Roles
      summary: Get users with role
      description: Returns a list of all users that have a specific role
      operationId: getUsersWithRole
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
      responses:
        '200':
          $ref: '#/components/responses/USER_LIST'
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
  /admin/roles:
    get:
      tags:
        - Roles
      summary: List Roles
      description: Get the names of all roles in the system
      operationId: listRoles
      responses:
        '200':
          $ref: '#/components/responses/ROLE_LIST'
    post:
      tags:
        - Roles
      summary: Add role
      operationId: addRole
      requestBody:
        $ref: '#/components/requestBodies/ROLENAME'
      responses:
        '201':
          description: Role added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
  /admin/processes:
    get:
      tags:
        - Monitoring
      summary: List processes
      description: Get a list of all running processes
      operationId: listProcesses
      parameters:
        - name: all
          in: query
          description: Whether to include all processes in cloud
          schema:
            type: boolean
      responses:
        '200':
          $ref: '#/components/responses/PROCESS_LIST'
  '/admin/processes/{name}':
    get:
      tags:
        - Monitoring
      summary: Get process
      description: Get details of a specific process
      operationId: getProcess
      parameters:
        - $ref: '#/components/parameters/name_process'
      responses:
        '200':
          $ref: '#/components/responses/PROCESS'
        '404':
          $ref: '#/components/responses/NAME_PROCESS_404'
    delete:
      tags:
        - Monitoring
      summary: Kill process
      operationId: killProcess
      parameters:
        - $ref: '#/components/parameters/name_process'
      responses:
        '204':
          description: Process killed
        '404':
          $ref: '#/components/responses/NAME_PROCESS_404'
  '/admin/functions/stored/{name}':
    get:
      tags:
        - Stored Functions
      summary: Get Stored Function
      operationId: getStoredFunction
      parameters:
        - $ref: '#/components/parameters/name_function'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              examples:
                STORED_FUNCTION:
                  description: STORED_FUNCTION
                  value: null
                  $ref: '#/components/examples/STORED_FUNCTION'
        '400':
          description: Function does not exist
        '404':
          $ref: '#/components/responses/NAME_FUNCTION_404'
    delete:
      tags:
        - Stored Functions
      summary: Delete Stored Function
      description: Delete the stored function specified in the query string parameter
      operationId: deleteStoredFunctionNamed
      parameters:
        - $ref: '#/components/parameters/name_function'
      responses:
        '204':
          description: Function deleted
        '400':
          description: Function does not exist
        '404':
          $ref: '#/components/responses/NAME_FUNCTION_404'
  /admin/functions/stored:
    get:
      tags:
        - Stored Functions
      summary: Get Stored Functions
      description: 'Retrieve all stored functions on the server, or optionally just the function specified in the query string parameter'
      operationId: exportStoredFunctions
      parameters:
        - name: name
          in: query
          description: Stored Function name
          schema:
            type: string
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              examples:
                STORED_FUNCTION:
                  description: STORED_FUNCTION
                  value: null
                  $ref: '#/components/examples/STORED_FUNCTION'
        '400':
          description: Function does not exist
        '404':
          $ref: '#/components/responses/NAME_FUNCTION_404'
    post:
      tags:
        - Stored Functions
      summary: Add Stored Function
      operationId: addStoredFunction
      requestBody:
        content:
          text/plain:
            examples:
              STORED_FUNCTION:
                description: STORED_FUNCTION
                value: null
                $ref: '#/components/examples/STORED_FUNCTION'
        required: true
      responses:
        '204':
          description: Function added
        '422':
          description: Function with the given name exists
    delete:
      tags:
        - Stored Functions
      summary: Delete Stored Functions
      description: 'Delete all stored functions on the server, or optionally just the function specified in the query string parameter'
      operationId: deleteStoredFunction
      parameters:
        - name: name
          in: query
          description: Stored Function name
          schema:
            type: string
      responses:
        '204':
          description: Function deleted
        '400':
          description: Function does not exist
        '404':
          $ref: '#/components/responses/NAME_FUNCTION_404'
  /admin/shutdown:
    post:
      tags:
        - Server Admin
      summary: Shutdown server
      operationId: shutdown
      responses:
        '200':
          description: Shutdown request received
        '405':
          description: Remote shutdowns not allowed
  /admin/diagnostics:
    post:
      tags:
        - Server Admin
      summary: Get server diagnostics report
      operationId: generateDiagnosticsReport
      responses:
        '200':
          description: Server diagnostics report zip created
  /admin/alive:
    get:
      tags:
        - Server Admin
      summary: Server aliveness check
      description: Determine whether the server is running
      operationId: aliveCheck
      responses:
        '200':
          description: Server is running
  /admin/healthcheck:
    get:
      tags:
        - Server Admin
      summary: Server health check
      description: Determine whether the server is running and able to accept traffic
      operationId: healthCheck
      responses:
        '200':
          description: Server is running and healthy
        '503':
          description: Server is unavailable
  '/{db}/icv':
    get:
      tags:
        - Integrity Constraints / SHACL
      summary: List constraints
      operationId: getConstraints
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: Constraints in RDF format
          content:
            text/turtle:
              examples:
                ICV_CONSTRAINT_TTL:
                  description: ICV_CONSTRAINT_TTL
                  value: null
                  $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
            application/trig:
              examples:
                ICV_CONSTRAINT_TTL:
                  description: ICV_CONSTRAINT_TTL
                  value: null
                  $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
            application/rdf+xml:
              examples:
                ICV_CONSTRAINT_RDFXML:
                  description: ICV_CONSTRAINT_RDFXML
                  value: null
                  $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
            application/n-triples:
              examples:
                ICV_CONSTRAINT_TTL:
                  description: ICV_CONSTRAINT_TTL
                  value: null
                  $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
            application/n-quads:
              examples:
                ICV_CONSTRAINT_TTL:
                  description: ICV_CONSTRAINT_TTL
                  value: null
                  $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
            application/ld+json:
              examples:
                ICV_CONSTRAINT_JSONLD:
                  description: ICV_CONSTRAINT_JSONLD
                  value: null
                  $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '0'
  '/{db}/icv/validate':
    post:
      tags:
        - Integrity Constraints / SHACL
      summary: Validate constraints
      description: Determine whether or not the given constraints are valid
      operationId: validateConstraints
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        $ref: '#/components/requestBodies/ICV_CONSTRAINT'
      responses:
        '200':
          $ref: '#/components/responses/ICV_CONSTRAINT_VALIDATION'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '1'
  '/{db}/icv/{txid}/validate':
    post:
      tags:
        - Integrity Constraints / SHACL
      summary: Validate constraints in transaction
      description: Determine whether or not the given constraints are valid
      operationId: validateInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      requestBody:
        $ref: '#/components/requestBodies/ICV_CONSTRAINT'
      responses:
        '200':
          $ref: '#/components/responses/ICV_CONSTRAINT_VALIDATION'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '2'
  '/{db}/icv/violations':
    post:
      tags:
        - Integrity Constraints / SHACL
      summary: Show violations
      description: Show any violations that the database has with respect to the given constraints
      operationId: violations
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        $ref: '#/components/requestBodies/ICV_CONSTRAINT'
      responses:
        '200':
          $ref: '#/components/responses/SPARQL_RESULTS'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '2'
        order: '1'
  '/{db}/icv/{txid}/violations':
    post:
      tags:
        - Integrity Constraints / SHACL
      summary: Show violations in transaction
      description: Show any violations that the database has with respect to the given constraints
      operationId: violationsInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      requestBody:
        $ref: '#/components/requestBodies/ICV_CONSTRAINT'
      responses:
        '200':
          $ref: '#/components/responses/ICV_CONSTRAINT_VIOLATIONS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '2'
        order: '2'
  '/{db}/icv/report':
    post:
      tags:
        - Integrity Constraints / SHACL
      summary: SHACL validation report
      description: Produces a SHACL validation report against the specified shape(s)
      externalDocs:
        url: 'https://www.w3.org/TR/shacl/#validation-report'
      operationId: shaclValidationReport
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: shapes
          in: query
          description: SHACL shapes to validate
          schema:
            type: string
        - name: shacl.shape.graphs
          in: query
          description: SHACL shape graphs to validate
          schema:
            type: string
        - name: nodes
          in: query
          description: SHACL focus node(s) to validate
          schema:
            type: string
        - name: countLimit
          in: query
          description: Maximum number of violations to report
          schema:
            type: string
        - name: shacl.targetClass.simple
          in: query
          schema:
            $ref: '#/components/schemas/SHACL_TARGETCLASS_SIMPLE'
        - name: shacl.violation.limit.shape
          in: query
          description: number of violation limits per SHACL shapes
          schema:
            type: string
        - $ref: '#/components/parameters/graph-uri'
        - $ref: '#/components/parameters/reasoning'
      responses:
        '200':
          $ref: '#/components/responses/SHACL_VALIDATION_REPORT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '3'
        order: '1'
  '/{db}/icv/{txid}/report':
    post:
      tags:
        - Integrity Constraints / SHACL
      summary: SHACL validation report in transaction
      description: Produces a SHACL validation report against the specified shape(s)
      externalDocs:
        url: 'https://www.w3.org/TR/shacl/#validation-report'
      operationId: shaclValidationReportInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
        - name: shapes
          in: query
          description: SHACL shapes to validate
          schema:
            type: string
        - name: shacl.shape.graphs
          in: query
          description: SHACL shape graphs to validate
          schema:
            type: string
        - name: nodes
          in: query
          description: SHACL focus node(s) to validate
          schema:
            type: string
        - name: countLimit
          in: query
          description: Maximum number of violations to report
          schema:
            type: string
        - name: shacl.targetClass.simple
          in: query
          schema:
            $ref: '#/components/schemas/SHACL_TARGETCLASS_SIMPLE'
        - name: shacl.violation.limit.shape
          in: query
          description: number of violation limits per SHACL shapes
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SHACL_VALIDATION_REPORT'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '3'
        order: '2'
  /admin/virtual_graphs_compute/import_db:
    post:
      tags:
        - Virtual Graphs External Compute
      summary: Import virtual graph
      description: Import (materialize) a virtual graph directly into the local knowledge graph
      operationId: importDb
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VIRTUAL_GRAPH_IMPORT'
        required: true
      responses:
        '204':
          description: Virtual graph imported
  /admin/virtual_graphs_compute/import:
    post:
      tags:
        - Virtual Graphs External Compute
      summary: Import virtual graph
      description: Import (materialize) a delimited file into the knowledge graph
      operationId: importFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VIRTUAL_GRAPH_IMPORT_FILE'
        required: true
      responses:
        '204':
          description: File imported
  '/admin/cache/refresh/{name}':
    post:
      tags:
        - Data Caching
      summary: Refresh cache
      operationId: refreshCache
      parameters:
        - name: name
          in: path
          description: The name of the cache
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              example: Refreshed query with 42 solutions
  /admin/cache/graphs:
    get:
      tags:
        - Data Caching
      summary: Get cached graphs
      operationId: getCachedGraphs
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACHE_GRAPH_LIST'
  /admin/cache/target:
    get:
      tags:
        - Data Caching
      summary: List cache targets
      operationId: listCacheTargets
      responses:
        '200':
          description: List of cache targets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACHE_TARGET_LIST'
    post:
      tags:
        - Data Caching
      summary: Add cache target
      operationId: addCacheTarget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CACHE_TARGET'
        required: true
      responses:
        '201':
          description: Cache target added
  /admin/cache/status:
    post:
      tags:
        - Data Caching
      summary: Get cache status
      description: Retrieve the status of one or more cached graphs or queries
      operationId: cachedDatasetStatus
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/URI'
        required: true
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACHE_STATUS_LIST'
  '/admin/cache/target/{name}/orphan':
    delete:
      tags:
        - Data Caching
      summary: Orphan cache target
      description: Orphan a cache target but do not destroy the contents
      operationId: orphanCacheTarget
      parameters:
        - name: name
          in: path
          description: The name of the target
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Target orphaned
  /admin/cache:
    post:
      tags:
        - Data Caching
      summary: Create cache
      description: Create a new cached dataset from a virtual graph
      operationId: createCache
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CACHE_OBJ'
        required: true
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              example: Cached query with 42 solutions
  '/admin/cache/{name}':
    delete:
      tags:
        - Data Caching
      summary: Drop cache
      operationId: dropCache
      parameters:
        - name: name
          in: path
          description: The name of the cache
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cache dropped
  '/admin/cache/target/{name}':
    delete:
      tags:
        - Data Caching
      summary: Remove cache target
      description: Remove a cache target and destroy its contents
      operationId: removeCacheTarget
      parameters:
        - name: name
          in: path
          description: The name of the target
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Target removed
  '/{db}':
    get:
      tags:
        - Graph Store Protocol
      summary: GET graph
      description: Retrieves an RDF payload that is a serialization of the named graph paired with the graph IRI in the database
      operationId: getGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the named graph to retrieve
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'graph' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/NAMED_GRAPH'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    put:
      tags:
        - Graph Store Protocol
      summary: PUT graph
      description: Stores the enclosed RDF payload as RDF graph content
      operationId: setGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'graph' to operate on the default graph
          schema:
            type: string
        - $ref: '#/components/parameters/header_content_encoding'
      requestBody:
        $ref: '#/components/requestBodies/NAMED_GRAPH'
      responses:
        '200':
          description: Graph overwritten
        '201':
          description: Graph created
          headers:
            Location:
              style: simple
              schema:
                type: string
                format: URI
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - Graph Store Protocol
      summary: POST graph
      description: Merges the enclosed RDF payload with the specified graph content
      operationId: appendToGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'graph' to operate on the default graph
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/NAMED_GRAPH'
      responses:
        '200':
          description: Graph merged
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - Graph Store Protocol
      summary: DELETE graph
      description: Deletes the RDF graph content identified by either the request or encoded IRI
      operationId: dropGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the named graph to delete
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'graph' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          description: Graph deleted
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    head:
      tags:
        - Graph Store Protocol
      summary: HEAD graph
      description: Test dereferenceable IRIs for validity and accessibility
      operationId: checkGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'graph' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          description: Graph exists and is accessible
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /matcher/suggestions:
    post:
      tags:
        - 'Matcher, aligning schemas from various data sources'
      summary: Aligns the source and target data source schemas
      operationId: createTypeAlignments
      responses:
        '200':
          description: aligned data source schemas
          content:
            text/turtle: {}
            application/trig: {}
            application/rdf+xml: {}
            application/n-triples: {}
            application/n-quads: {}
            application/ld+json: {}
            application/json: {}
  '/{db}/query/reasoning':
    get:
      tags:
        - Reasoning
      summary: Perform SPARQL query with reasoning enabled
      operationId: queryGetWithReasoning
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: Query results
          content:
            application/sparql-results+xml:
              examples:
                SPARQL_RESULTS_XML:
                  description: SPARQL_RESULTS_XML
                  value: null
                  $ref: '#/components/examples/SPARQL_RESULTS_XML'
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
            text/csv:
              examples:
                SPARQL_RESULTS_CSV:
                  description: SPARQL_RESULTS_CSV
                  value: null
                  $ref: '#/components/examples/SPARQL_RESULTS_CSV'
            text/tsv:
              examples:
                SPARQL_RESULTS_TSV:
                  description: SPARQL_RESULTS_TSV
                  value: null
                  $ref: '#/components/examples/SPARQL_RESULTS_TSV'
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  value: null
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  value: null
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  value: null
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  value: null
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  value: null
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '406':
          description: Accept header invalid for type of query sent
    post:
      tags:
        - Reasoning
      summary: Perform SPARQL query with reasoning enabled
      operationId: queryPostWithReasoning
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
      requestBody:
        content:
          application/sparql-query:
            examples:
              SPARQL_QUERY:
                description: SPARQL_QUERY
                value: null
                $ref: '#/components/examples/SPARQL_QUERY'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
      responses:
        '200':
          description: Query results
          content:
            application/sparql-results+xml:
              examples:
                SPARQL_RESULTS_XML:
                  description: SPARQL_RESULTS_XML
                  value: null
                  $ref: '#/components/examples/SPARQL_RESULTS_XML'
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
            text/csv:
              examples:
                SPARQL_RESULTS_CSV:
                  description: SPARQL_RESULTS_CSV
                  value: null
                  $ref: '#/components/examples/SPARQL_RESULTS_CSV'
            text/tsv:
              examples:
                SPARQL_RESULTS_TSV:
                  description: SPARQL_RESULTS_TSV
                  value: null
                  $ref: '#/components/examples/SPARQL_RESULTS_TSV'
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  value: null
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  value: null
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  value: null
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  value: null
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  value: null
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '406':
          description: Accept header invalid for type of query sent
  '/{db}/reasoning/{txid}/explain/inconsistency':
    get:
      tags:
        - Reasoning
      summary: Explain inconsistency in transaction
      description: 'Explain how, if at all, the data are inconsistent with respect to the ontology'
      operationId: explainInconsistencyInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      responses:
        '200':
          $ref: '#/components/responses/REASONING_PROOF_LIST'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/explain/inconsistency':
    get:
      tags:
        - Reasoning
      summary: Explain inconsistency
      description: 'Explain how, if at all, the data are inconsistent with respect to the ontology'
      operationId: explainInconsistency
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/REASONING_PROOF_LIST'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/{txid}/explain':
    post:
      tags:
        - Reasoning
      summary: Explain inference in transaction
      description: Explain how the inference engine inferred a specific piece of data
      operationId: explainInferenceInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      requestBody:
        description: The axiom to explain
        content:
          text/turtle:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/trig:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/rdf+xml:
            examples:
              REASONING_AXIOM_RDFXML:
                description: REASONING_AXIOM_RDFXML
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_RDFXML'
          application/n-triples:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/n-quads:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/ld+json:
            examples:
              REASONING_AXIOM_JSONLD:
                description: REASONING_AXIOM_JSONLD
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/REASONING_PROOF_LIST'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/explain':
    post:
      tags:
        - Reasoning
      summary: Explain inference
      description: Explain how the inference engine inferred a specific piece of data
      operationId: explainInference
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: The axiom to explain
        content:
          text/turtle:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/trig:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/rdf+xml:
            examples:
              REASONING_AXIOM_RDFXML:
                description: REASONING_AXIOM_RDFXML
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_RDFXML'
          application/n-triples:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/n-quads:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/ld+json:
            examples:
              REASONING_AXIOM_JSONLD:
                description: REASONING_AXIOM_JSONLD
                value: null
                $ref: '#/components/examples/REASONING_AXIOM_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/REASONING_PROOF_LIST'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/schema':
    get:
      tags:
        - Reasoning
      summary: Get reasoning schema
      description: Retrieve the reasoning schema in RDF of the given database
      operationId: getReasoningSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: Reasoning schema in RDF
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  value: null
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  value: null
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  value: null
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  value: null
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  value: null
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/consistency':
    get:
      tags:
        - Reasoning
      summary: Check consistency
      description: Returns whether or not the data in the database are consistent with respect to the ontology
      operationId: isConsistent
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: Operation successful
          content:
            text/boolean: {}
            application/json:
              schema:
                $ref: '#/components/schemas/CONSISTENT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/transaction/begin':
    post:
      tags:
        - Transactions
      summary: Begin a transaction
      operationId: beginTransaction
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              example: 067e6162-3b6f-4ae2-a171-2470b63dff00
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '1'
  '/{db}/transaction/begin/{txid}':
    post:
      tags:
        - Transactions
      summary: Begin a transaction with specified txid
      operationId: beginTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      responses:
        '200':
          description: Transaction begun
          content:
            text/plain:
              example: 067e6162-3b6f-4ae2-a171-2470b63dff00
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '2'
  '/{db}/transaction/commit/{txid}':
    post:
      tags:
        - Transactions
      summary: Commit a transaction
      operationId: commitTransaction
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      responses:
        '200':
          description: Commit successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/COMMIT_RESULT'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '3'
  '/{db}/transaction/rollback/{txid}':
    post:
      tags:
        - Transactions
      summary: Rollback a transaction
      operationId: rollbackTransaction
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '4'
  '/{db}/{txid}/clear':
    post:
      tags:
        - Transactions
      summary: Clear database within a transaction
      operationId: clearDatabasesInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/{txid}/remove':
    post:
      tags:
        - Transactions
      summary: Remove data within a transaction
      operationId: removeDataInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                value: null
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                value: null
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                value: null
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                value: null
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                value: null
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/{txid}/add':
    post:
      tags:
        - Transactions
      summary: Add data within a transaction
      operationId: addDataInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
        - $ref: '#/components/parameters/header_content_encoding'
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                value: null
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                value: null
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                value: null
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                value: null
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                value: null
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/transaction':
    get:
      tags:
        - Transactions
      summary: List all open transactions on a database
      operationId: listTransactions
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TRANSACTION'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/data_sources/{name}/refresh_counts':
    post:
      tags:
        - Data Sources
      summary: Refresh table row-count estimates
      operationId: refreshCounts
      parameters:
        - $ref: '#/components/parameters/name_ds'
      requestBody:
        $ref: '#/components/requestBodies/DATA_SOURCE_REFRESH_TABLE'
      responses:
        '204':
          description: Data source counts refreshed
        '404':
          $ref: '#/components/responses/NAME_DS_404'
  /admin/data_sources/data_source_type_description:
    get:
      tags:
        - Data Sources
      summary: Describe the supported data source types and their options.
      operationId: getDbTypeOptionsDescription
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DATA_SOURCE_TYPE_DESCRIPTION'
  '/admin/data_sources/{name}/share':
    post:
      tags:
        - Data Sources
      summary: Share data source
      operationId: shareDataSource
      parameters:
        - $ref: '#/components/parameters/name_ds'
      responses:
        '204':
          description: Data source shared
        '404':
          $ref: '#/components/responses/NAME_DS_404'
  '/admin/data_sources/{name}/test_data_source':
    post:
      tags:
        - Data Sources
      summary: Test an existing data source connection
      operationId: testDataSource
      parameters:
        - $ref: '#/components/parameters/name_ds'
      responses:
        '204':
          description: Data source test successful
        '404':
          $ref: '#/components/responses/NAME_DS_404'
        '503':
          description: Data source test failed
  '/admin/data_sources/{name}/available':
    get:
      tags:
        - Data Sources
      summary: Available
      description: Returns whether or not the data source is available
      operationId: availableDataSource
      parameters:
        - $ref: '#/components/parameters/name_ds'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain: {}
            application/json:
              schema:
                $ref: '#/components/schemas/DATA_SOURCE_AVAILABLE'
        '404':
          $ref: '#/components/responses/NAME_DS_404'
  '/admin/data_sources/{name}/query':
    post:
      tags:
        - Data Sources
      summary: Query data source
      operationId: queryDataSource
      parameters:
        - $ref: '#/components/parameters/name_ds'
      requestBody:
        $ref: '#/components/requestBodies/DATA_SOURCE_QUERY'
      responses:
        '200':
          description: Query executed
  '/admin/data_sources/{name}/info':
    get:
      tags:
        - Data Sources
      summary: Get data source info
      operationId: dataSourceInfo
      parameters:
        - $ref: '#/components/parameters/name_ds'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SINGLE_DATA_SOURCE_INFO'
        '404':
          $ref: '#/components/responses/NAME_DS_404'
  '/admin/data_sources/{name}/online':
    post:
      tags:
        - Data Sources
      summary: Online data source
      operationId: onlineDataSource
      parameters:
        - $ref: '#/components/parameters/name_ds'
      responses:
        '204':
          description: Data source onlined
        '404':
          $ref: '#/components/responses/NAME_DS_404'
  /admin/data_sources:
    get:
      tags:
        - Data Sources
      summary: List data sources
      operationId: listDataSources
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DATA_SOURCE_NAME_LIST'
    post:
      tags:
        - Data Sources
      summary: Add data source
      operationId: addDataSource
      requestBody:
        $ref: '#/components/requestBodies/DATA_SOURCE_CREATE'
      responses:
        '201':
          description: Data source created
  '/admin/data_sources/{name}':
    put:
      tags:
        - Data Sources
      summary: Update data source
      operationId: updateDataSource
      parameters:
        - $ref: '#/components/parameters/name_ds'
      requestBody:
        $ref: '#/components/requestBodies/DATA_SOURCE_UPDATE'
      responses:
        '201':
          description: Virtual graph updated
    delete:
      tags:
        - Data Sources
      summary: Delete data source
      operationId: deleteDataSource
      parameters:
        - $ref: '#/components/parameters/name_ds'
      responses:
        '204':
          description: Data source deleted
        '404':
          $ref: '#/components/responses/NAME_DS_404'
  '/admin/data_sources/{name}/options':
    get:
      tags:
        - Data Sources
      summary: Get data source options
      operationId: getDataSourceOptions
      parameters:
        - $ref: '#/components/parameters/name_ds'
      responses:
        '200':
          description: Operation successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DATA_SOURCE_OPTIONS'
        '404':
          $ref: '#/components/responses/NAME_DS_404'
  /admin/data_sources/list:
    get:
      tags:
        - Data Sources
      summary: List data sources' info
      operationId: dataSourceInfos
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DATA_SOURCE_LIST'
  '/admin/data_sources/{name}/refresh_metadata':
    post:
      tags:
        - Data Sources
      summary: Refresh metadata
      operationId: refreshMetadata
      parameters:
        - $ref: '#/components/parameters/name_ds'
      requestBody:
        $ref: '#/components/requestBodies/DATA_SOURCE_REFRESH_TABLE'
      responses:
        '204':
          description: Data source metadata refreshed
        '404':
          $ref: '#/components/responses/NAME_DS_404'
  /admin/data_sources/test_new_connection:
    post:
      tags:
        - Data Sources
      summary: Test the connection for a new data source
      operationId: testNewConnection
      requestBody:
        $ref: '#/components/requestBodies/DATA_SOURCE_OPTIONS'
      responses:
        '204':
          description: Data source test successful
        '404':
          $ref: '#/components/responses/NAME_DS_404'
        '503':
          description: Data source test failed
  '/{db}/graphql/{schema}':
    get:
      tags:
        - GraphQL
      summary: Perform GraphQL query with schema
      operationId: graphQLQueryGetWithSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
        - name: query
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/GRAPHQL_QUERY'
        - $ref: '#/components/parameters/name_schema'
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_QUERY_RESULT'
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - GraphQL
      summary: Perform GraphQL query with schema
      operationId: graphQLQueryPostWithSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
        - $ref: '#/components/parameters/name_schema'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GRAPHQL_QUERY_POST'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_QUERY_RESULT'
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/graphql':
    get:
      tags:
        - GraphQL
      summary: Perform GraphQL query
      operationId: graphQLQueryGet
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: query
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/GRAPHQL_QUERY'
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_QUERY_RESULT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - GraphQL
      summary: Perform GraphQL query
      operationId: graphQLQueryPost
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GRAPHQL_QUERY_POST'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_QUERY_RESULT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/graphql/schemas':
    get:
      tags:
        - GraphQL
      summary: List schemas
      operationId: listGraphQLSchemas
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: List of schemas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GRAPHQL_SCHEMAS'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - GraphQL
      summary: Clear schemas
      operationId: clearGraphQLSchemas
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '204':
          description: Schemas cleared
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/graphql/schemas/{schema}':
    get:
      tags:
        - GraphQL
      summary: Get schema
      operationId: getGraphQLSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
        - $ref: '#/components/parameters/name_schema'
      responses:
        '200':
          description: Operation successful
          content:
            application/graphql:
              examples:
                GRAPHQL_SCHEMA:
                  description: GRAPHQL_SCHEMA
                  value: null
                  $ref: '#/components/examples/GRAPHQL_SCHEMA'
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    put:
      tags:
        - GraphQL
      summary: Update schema
      operationId: updateGraphQLSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
        - $ref: '#/components/parameters/name_schema'
      requestBody:
        $ref: '#/components/requestBodies/GRAPHQL_SCHEMA'
      responses:
        '200':
          description: Schema updated
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - GraphQL
      summary: Add schema
      operationId: addGraphQLSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
        - $ref: '#/components/parameters/name_schema'
      requestBody:
        $ref: '#/components/requestBodies/GRAPHQL_SCHEMA'
      responses:
        '201':
          description: Schema added
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - GraphQL
      summary: Remove schema
      operationId: removeGraphQLSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
        - $ref: '#/components/parameters/name_schema'
      responses:
        '204':
          description: Schema removed
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/update':
    get:
      tags:
        - SPARQL
      summary: Perform SPARQL Update query
      operationId: updateGet
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/update'
        - $ref: '#/components/parameters/reasoning'
        - $ref: '#/components/parameters/schema'
        - name: txid
          in: query
          description: Transaction ID
          schema:
            type: string
            format: UUID
        - $ref: '#/components/parameters/baseURI'
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/useNamespaces'
        - $ref: '#/components/parameters/graph-uri'
        - $ref: '#/components/parameters/using-graph-uri'
        - $ref: '#/components/parameters/default-graph-uri'
        - $ref: '#/components/parameters/using-named-graph-uri'
        - $ref: '#/components/parameters/named-graph-uri'
        - $ref: '#/components/parameters/insert-graph-uri'
        - $ref: '#/components/parameters/remove-graph-uri'
      responses:
        '200':
          description: Update query succeeded
        '400':
          description: Invalid query sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - SPARQL
      summary: Perform SPARQL Update query
      operationId: updatePost
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/update'
        - $ref: '#/components/parameters/reasoning'
        - $ref: '#/components/parameters/schema'
        - name: txid
          in: query
          description: Transaction ID
          schema:
            type: string
            format: UUID
        - $ref: '#/components/parameters/baseURI'
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/useNamespaces'
        - $ref: '#/components/parameters/graph-uri'
        - $ref: '#/components/parameters/using-graph-uri'
        - $ref: '#/components/parameters/default-graph-uri'
        - $ref: '#/components/parameters/using-named-graph-uri'
        - $ref: '#/components/parameters/named-graph-uri'
        - $ref: '#/components/parameters/insert-graph-uri'
        - $ref: '#/components/parameters/remove-graph-uri'
      requestBody:
        content:
          application/sparql-update:
            examples:
              SPARQL_UPDATE:
                description: SPARQL_UPDATE
                value: null
                $ref: '#/components/examples/SPARQL_UPDATE'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SPARQL_UPDATE_QUERY'
        required: true
      responses:
        '200':
          description: Update query succeeded
        '400':
          description: Invalid query sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/explain':
    get:
      tags:
        - SPARQL
      summary: Explain SPARQL query
      operationId: explainQueryGet
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
      responses:
        '200':
          description: Query plan
          content:
            text/plain:
              examples:
                QUERY_PLAN_TEST:
                  description: QUERY_PLAN_TEST
                  value: null
                  $ref: '#/components/examples/QUERY_PLAN_TEST'
            application/json:
              schema:
                $ref: '#/components/schemas/QUERY_PLAN_JSON'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '501':
          $ref: '#/components/responses/FUNCTIONALITY_NOT_SUPPORTED'
    post:
      tags:
        - SPARQL
      summary: Explain SPARQL query
      operationId: explainQueryPost
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/verbose'
      requestBody:
        content:
          application/sparql-query:
            examples:
              SPARQL_QUERY:
                description: SPARQL_QUERY
                value: null
                $ref: '#/components/examples/SPARQL_QUERY'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
        required: true
      responses:
        '200':
          description: Query plan
          content:
            text/plain:
              examples:
                QUERY_PLAN_TEST:
                  description: QUERY_PLAN_TEST
                  value: null
                  $ref: '#/components/examples/QUERY_PLAN_TEST'
            application/json:
              schema:
                $ref: '#/components/schemas/QUERY_PLAN_JSON'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '501':
          $ref: '#/components/responses/FUNCTIONALITY_NOT_SUPPORTED'
  '/{db}/query':
    get:
      tags:
        - SPARQL
      summary: Perform SPARQL query
      operationId: getSparqlQuery
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
        - $ref: '#/components/parameters/schema'
        - name: txid
          in: query
          description: Transaction ID
          schema:
            type: string
            format: UUID
        - $ref: '#/components/parameters/baseURI'
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/useNamespaces'
        - $ref: '#/components/parameters/default-graph-uri'
        - $ref: '#/components/parameters/named-graph-uri'
      responses:
        '200':
          $ref: '#/components/responses/SPARQL_RESULTS'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '406':
          description: Accept header invalid for type of query sent
    post:
      tags:
        - SPARQL
      summary: Perform SPARQL query
      operationId: postSparqlQuery
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
        - $ref: '#/components/parameters/schema'
        - name: txid
          in: query
          description: Transaction ID
          schema:
            type: string
            format: UUID
        - $ref: '#/components/parameters/baseURI'
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/useNamespaces'
        - $ref: '#/components/parameters/default-graph-uri'
        - $ref: '#/components/parameters/named-graph-uri'
      requestBody:
        content:
          application/sparql-query:
            examples:
              SPARQL_QUERY:
                description: SPARQL_QUERY
                value: null
                $ref: '#/components/examples/SPARQL_QUERY'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SPARQL_RESULTS'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '406':
          description: Accept header invalid for type of query sent
  /admin/virtual_graphs/import:
    post:
      tags:
        - Virtual Graphs
      summary: Import file
      description: Import a CSV or JSON file as a virtual graph into the knowledge graph
      operationId: importFileVG
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VIRTUAL_GRAPH_IMPORT_FILE'
      responses:
        '200':
          description: File imported successfully
  /admin/virtual_graphs/list:
    get:
      tags:
        - Virtual Graphs
      summary: List virtual graphs' info
      operationId: virtualGraphInfos
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VIRTUAL_GRAPH_LIST'
  /admin/virtual_graphs:
    get:
      tags:
        - Virtual Graphs
      summary: List virtual graphs
      operationId: listVGs
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VIRTUAL_GRAPH_NAME_LIST'
    post:
      tags:
        - Virtual Graphs
      summary: Add virtual graph
      operationId: addVG
      requestBody:
        $ref: '#/components/requestBodies/VIRTUAL_GRAPH_CREATE'
      responses:
        '201':
          description: Virtual graph created
  '/admin/virtual_graphs/{name}/mappingsString/{syntax}':
    get:
      tags:
        - Virtual Graphs
      summary: Get mappings
      operationId: getVGMappingsForSyntax
      parameters:
        - $ref: '#/components/parameters/name_vg'
        - name: syntax
          in: path
          description: 'The desired RDF syntax of the mappings (STARDOG, R2RML, or SMS2)'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Virtual graph mappings as RDF
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  value: null
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  value: null
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  value: null
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  value: null
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  value: null
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          $ref: '#/components/responses/NAME_VG_404'
  '/admin/virtual_graphs/{name}/database':
    get:
      tags:
        - Virtual Graphs
      summary: Get database
      description: Get the database associated with a virtual graph
      operationId: getVGDatabase
      parameters:
        - $ref: '#/components/parameters/name_vg'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: string
                description: 'The database name, or * if one was not specified'
        '404':
          $ref: '#/components/responses/NAME_VG_404'
  '/admin/virtual_graphs/{name}/available':
    get:
      tags:
        - Virtual Graphs
      summary: Available
      description: Returns whether or not the virtual graph is available
      operationId: vgAvailable
      parameters:
        - $ref: '#/components/parameters/name_vg'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain: {}
            application/json:
              schema:
                $ref: '#/components/schemas/VIRTUAL_GRAPH_AVAILABLE'
        '404':
          $ref: '#/components/responses/NAME_VG_404'
  '/admin/virtual_graphs/{name}/options':
    get:
      tags:
        - Virtual Graphs
      summary: Get virtual graph options
      operationId: getVGOptions
      parameters:
        - $ref: '#/components/parameters/name_vg'
      responses:
        '200':
          description: Operation successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
        '404':
          $ref: '#/components/responses/NAME_VG_404'
  '/admin/virtual_graphs/{name}/online':
    post:
      tags:
        - Virtual Graphs
      summary: Online virtual graph
      operationId: onlineVG
      parameters:
        - $ref: '#/components/parameters/name_vg'
      responses:
        '204':
          description: Virtual graph onlined
        '404':
          $ref: '#/components/responses/NAME_VG_404'
  '/admin/virtual_graphs/{name}':
    put:
      tags:
        - Virtual Graphs
      summary: Update virtual graph
      operationId: updateVG
      parameters:
        - $ref: '#/components/parameters/name_vg'
      requestBody:
        $ref: '#/components/requestBodies/VIRTUAL_GRAPH_UPDATE'
      responses:
        '201':
          description: Virtual graph updated
    delete:
      tags:
        - Virtual Graphs
      summary: Delete virtual graph
      operationId: deleteVG
      parameters:
        - $ref: '#/components/parameters/name_vg'
      responses:
        '204':
          description: Virtual graph deleted
        '404':
          $ref: '#/components/responses/NAME_VG_404'
  /admin/virtual_graphs/import_db:
    post:
      tags:
        - Virtual Graphs
      summary: Import virtual graph
      description: Import (materialize) a virtual graph directly into the local knowledge graph
      operationId: importDb
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VIRTUAL_GRAPH_IMPORT'
        required: true
      responses:
        '204':
          description: Virtual graph imported
  '/admin/virtual_graphs/{name}/info':
    get:
      tags:
        - Virtual Graphs
      summary: Get virtual graph info
      operationId: virtualGraphInfo
      parameters:
        - $ref: '#/components/parameters/name_vg'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SINGLE_VIRTUAL_GRAPH_INFO'
        '404':
          $ref: '#/components/responses/NAME_VG_404'
  '/{db}/docs/size':
    get:
      tags:
        - BITES
      summary: Get size of document store
      operationId: getDocStoreSize
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: Size of document store
          content:
            text/plain:
              examples:
                PLAINTEXT_INT:
                  description: PLAINTEXT_INT
                  value: null
                  $ref: '#/components/examples/PLAINTEXT_INT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/docs':
    post:
      tags:
        - BITES
      summary: Add document(s) to document store
      operationId: modifyDocument
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: A multipart request with any number of documents
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BITES_POST_DOC'
      responses:
        '201':
          description: Document(s) added
          headers:
            Location:
              style: simple
              schema:
                type: string
                format: URI
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - BITES
      summary: Clear document store
      operationId: clearDocStore
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '204':
          description: Document store cleared
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/docs/reindex':
    post:
      tags:
        - BITES
      summary: Reindex document store
      operationId: reindexDocStore
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '204':
          description: Document store reindexed
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/docs/{name}':
    get:
      tags:
        - BITES
      summary: Retrieve a document from the document store
      operationId: getDocument
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/name_doc'
      responses:
        '200':
          description: 'The requested document, in its native format'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - BITES
      summary: Delete a document from the document store
      operationId: removeDocument
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/name_doc'
      responses:
        '204':
          description: Document deleted
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/export':
    get:
      tags:
        - DB Admin
      summary: Export database
      operationId: exportDatabase
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: obf
          in: query
          description: 'Path to an obfuscation configuration file, or DEFAULT'
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/DATABASE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - DB Admin
      summary: Export database (obfuscated)
      operationId: exportDatabaseObfuscated
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: Obfuscation configuration
        content:
          text/turtle:
            examples:
              OBFUSCATION_CONFIG:
                description: OBFUSCATION_CONFIG
                value: null
                $ref: '#/components/examples/OBFUSCATION_CONFIG'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/DATABASE_OBF'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/size':
    get:
      tags:
        - DB Admin
      summary: Get DB Size
      description: Retrieve the size of the db. Size is approximate unless the exact parameter is set to true
      operationId: getDBSize
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: exact
          in: query
          description: Whether to request that the database size be exact instead of approximate
          schema:
            type: boolean
      responses:
        '200':
          description: The size (in triples) of the database
          content:
            text/plain:
              schema:
                type: integer
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/model':
    get:
      tags:
        - DB Admin
      summary: Generate Model
      description: Generate the reasoning model used by this database in various formats
      operationId: generateModel
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/reasoning'
        - name: output
          in: query
          description: 'Desired output format (text, owl, shacl, sql, graphql)'
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/REASONING_MODEL'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/namespaces':
    get:
      tags:
        - DB Admin
      summary: Get namespaces
      description: Retrieve the namespaces stored in the database
      operationId: getNamespaces
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: A JSON object listing the prefixes and IRIs of the stored namespaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON_NAMESPACES'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - DB Admin
      summary: Import namespaces
      description: Add namespaces to the database via a block or blocks of RDF that declares them
      operationId: importNamespaces
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        $ref: '#/components/requestBodies/RDF_REQUIRED'
      responses:
        '200':
          description: A JSON object listing the prefixes and IRIs of the stored namespaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON_NAMESPACES'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/cluster/standby/registry:
    get:
      tags:
        - Cluster Admin
      summary: List standby nodes
      operationId: getStandbyNodes
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STANDBY_NODE_LIST'
      x-sort-order:
        group: '1'
        order: '1'
  /admin/cluster/standby/pause:
    get:
      tags:
        - Cluster Admin
      summary: Get standby pause status
      description: Get the pause status of a standby node
      operationId: getPauseState
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STANDBY_PAUSED'
        '400':
          description: Node is not a standby node
      x-sort-order:
        group: '1'
        order: '4'
    put:
      tags:
        - Cluster Admin
      summary: Pause/Unpause standby node
      operationId: standbyPause
      parameters:
        - name: pause
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Pause/Unpause requested
        '400':
          description: Node is not a standby node
      x-sort-order:
        group: '1'
        order: '3'
  '/admin/cluster/standby/registry/{standbyid}':
    delete:
      tags:
        - Cluster Admin
      summary: Revoke standby access
      description: Instruct a standby node to leave its cluster
      operationId: standbyRevokeAccess
      parameters:
        - name: standbyid
          $ref: '#/components/parameters/standbyid'
      responses:
        '200':
          description: Node has been instructed to leave
        '400':
          description: Node is not a standby node
      x-sort-order:
        group: '1'
        order: '5'
  /admin/cluster:
    get:
      tags:
        - Cluster Admin
      summary: Get cluster info
      operationId: clusterInfo
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NODE_LIST'
        '404':
          description: Not part of a cluster
  /admin/cluster/standby/attemptSync:
    put:
      tags:
        - Cluster Admin
      summary: Attempt to sync a standby or read replica node with the cluster
      operationId: attemptSync
      responses:
        '200':
          description: A sync attempt for a standby or read replica node has been initiated
  /admin/cluster/readonly:
    put:
      tags:
        - Cluster Admin
      summary: Start read only mode
      operationId: readOnlyStart
      responses:
        '200':
          description: Read only mode started
    delete:
      tags:
        - Cluster Admin
      summary: Stop read only mode
      operationId: readOnlyStop
      responses:
        '200':
          description: Read only mode stopped
  /admin/cluster/readreplica:
    get:
      tags:
        - Cluster Admin
      summary: Read replica check
      description: Determine if a specific standby node is read replica
      operationId: isReadReplica
      responses:
        '200':
          description: Node is read replica
        '400':
          description: Node is not a read replica
  /admin/cluster/coordinator:
    get:
      tags:
        - Cluster Admin
      summary: Coordinator check
      description: Determine if a specific cluster node is the cluster coordinator
      operationId: isCoordinator
      responses:
        '200':
          description: Node is coordinator
        '503':
          description: Node is not coordinator
  /admin/cluster/standby/status:
    get:
      tags:
        - Cluster Admin
      summary: Get standby node status
      operationId: getStandbyStatus
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STANDBY_STATUS'
  /admin/cluster/diagnostics:
    post:
      tags:
        - Cluster Admin
      summary: Get cluster diagnostics report
      operationId: generateClusterDiagnosticsReport
      responses:
        '200':
          description: Cluster diagnostics report zip created
  /admin/cluster/status:
    get:
      tags:
        - Cluster Admin
      summary: Get cluster status
      operationId: packStatus
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CLUSTER_STATUS'
  /admin/shutdownAll:
    post:
      tags:
        - Cluster Admin
      summary: Shutdown all nodes
      operationId: shutdownAll
      responses:
        '200':
          description: Shutdown request received
        '405':
          description: Remote shutdown not supported
components:
  schemas:
    BOOLEAN:
      type: boolean
    INTEGER:
      type: integer
      format: int64
      example: 42
    UUID:
      type: string
      format: uuid
      example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
    URI:
      type: string
      format: URI
    IP_ADDRESS:
      pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{3,5})?$'
      type: string
      example: '165.7.29.42:5820'
    GENERIC_RESPONSE_MESSAGE:
      required:
        - message
      properties:
        message:
          type: string
          example: Successfully executed request
    GENERIC_RESPONSE_ERROR_MESSAGE:
      required:
        - message
      properties:
        message:
          type: string
          example: 'Unexpected end of file [L9]'
        code:
          type: string
          example: QEIVR2
    GENERIC_JSONLD:
      properties:
        '@id':
          type: string
          example: 'urn:example:Entity1'
        '@type':
          type: string
          example: 'urn:example:Entity'
        'urn:example:hasProp':
          required:
            - '@id'
          type: array
          items:
            required:
              - '@value'
            properties:
              '@type':
                type: string
                example: 'http://www.w3.org/2001/XMLSchema#integer'
              '@value':
                type: string
                example: '42'
    GENERIC_JSONLD_OBF:
      properties:
        '@id':
          type: string
          example: 'tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154'
        '@type':
          type: string
          example: 'tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42'
        'tag:stardog:api:obf:223ca9493ab57efa04fdc9b245cb86c22d00c88cf6de8f99135f78d06fd10fab':
          type: array
          items:
            properties:
              '@type':
                type: string
                example: 'tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7'
              '@value':
                type: string
                example: c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2
    JSON_NAMESPACES:
      required:
        - namespaces
      properties:
        namespaces:
          type: array
          items:
            required:
              - prefix
              - name
            properties:
              prefix:
                type: string
                example: rdfs
              name:
                type: string
                example: 'http://www.w3.org/2000/01/rdf-schema#'
    JSON_CONFIG_PROPERTIES:
      minProperties: 1
      additionalProperties:
        properties:
          name:
            type: string
            example: reasoning.sameas
          type:
            type: string
            example: Enum
          mutable:
            type: boolean
          mutableWhileOnline:
            type: boolean
            description: Can be changed while the database is online
          category:
            type: string
            example: Reasoning
          label:
            type: string
            example: SameAs
          description:
            type: string
            example: 'Option to enable owl:sameAs reasoning. When this option is set to ON reflexive, symmetric, and transitive closure of the owl:sameAs triples in the database is computed. When it is set to FULL, owl:sameAs inferences are computed based on the schema axioms such as functional properties'
          possibleValues:
            type: array
            example:
              - 'OFF'
              - 'ON'
              - FULL
            items:
              type: string
          defaultValue:
            type: string
            example: 'OFF'
    DB_OFFLINE_ONLINE:
      required:
        - timeout
      properties:
        timeout:
          type: integer
          description: timeout in ms
          format: int32
          example: 42
    DB_CREATE:
      required:
        - root
      properties:
        root:
          required:
            - dbname
            - options
            - files
          properties:
            dbname:
              type: string
              example: myDb
            options:
              type: object
            files:
              type: array
              items:
                required:
                  - filename
                properties:
                  filename:
                    type: string
                    example: fileX.ttl
                  context:
                    type: string
                    example: 'urn:my:graph'
          example: '{"dbname": "myDb", "options": {}, "files": [ {"filename": "file1.ttl"} ] }'
      additionalProperties:
        type: string
        format: binary
    COMMIT_RESULT:
      required:
        - added
        - removed
      properties:
        added:
          type: integer
          description: Approximate number of triples added
          format: int32
          example: 42
        removed:
          type: integer
          description: Approximate number of triples removed
          format: int32
          example: 29
    TRANSACTION:
      required:
        - id
        - db
        - user
        - startTime
      properties:
        id:
          type: string
          format: uuid
          example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
        db:
          type: string
          example: myDb
        user:
          type: string
          example: admin
        startTime:
          type: integer
          description: Unix timestamp when transaction started
          format: int64
          example: 1579812754096
    SPARQL_QUERY:
      required:
        - query
      properties:
        query:
          type: string
          example: |-
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX : <http://example.org/stardog#>
            
            SELECT ?s ?label WHERE {
                ?s a :Example ;
                   rdfs:label ?label
            }
        update:
          type: string
          example: |-
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX : <http://example.org/stardog#>
            
            SELECT ?s ?label WHERE {
                ?s a :Example ;
                   rdfs:label ?label
            }
        reasoning:
          type: boolean
          description: Enable Reasoning
        schema:
          type: string
          description: The name of the reasoning schema to use. Will automatically enable reasoning even without the 'reasoning' parameter
        txid:
          type: string
          format: uuid
          example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
        baseURI:
          type: string
          format: URI
        timeout:
          type: integer
          description: The number of ms after which the query should timeout
          format: int32
          example: 42
        limit:
          type: integer
          description: The maximum number of results to return
          format: int32
          example: 42
        offset:
          type: integer
          description: How far into the result set to offset
          format: int32
          example: 42
        useNamespaces:
          type: boolean
          description: Use namespace substitution and prefix lines
          default: false
        default-graph-uri:
          type: string
          description: URI(s) to be used as the default graph (equivalent to FROM)
        named-graph-uri:
          type: string
          description: URI(s) to be used as named graphs (equivalent to FROM NAMED)
    SPARQL_UPDATE_QUERY:
      required:
        - query
      properties:
        query:
          type: string
          example: |-
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX : <http://example.org/stardog#>
            
            INSERT {
                ?s ?p ?newO
            }
            WHERE {
                ?s ?p ?o .
                BIND(CONCAT(?o, " ", - New) as ?newO)
            }
        update:
          type: string
          example: |-
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX : <http://example.org/stardog#>
            
            INSERT {
                ?s ?p ?newO
            }
            WHERE {
                ?s ?p ?o .
                BIND(CONCAT(?o, " ", - New) as ?newO)
            }
        reasoning:
          type: boolean
          description: Enable Reasoning
        schema:
          type: string
          description: The name of the reasoning schema to use. Will automatically enable reasoning even without the 'reasoning' parameter
        txid:
          type: string
          format: uuid
          example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
        baseURI:
          type: string
          format: URI
        timeout:
          type: integer
          description: The number of ms after which the query should timeout
          format: int32
          example: 42
        limit:
          type: integer
          description: The maximum number of results to return
          format: int32
          example: 42
        offset:
          type: integer
          description: How far into the result set to offset
          format: int32
          example: 42
        useNamespaces:
          type: boolean
          description: Use namespace substitution and prefix lines
          default: false
        using-graph-uri:
          type: string
          description: URI(s) to be used as the default graph (equivalent to USING)
        using-named-graph-uri:
          type: string
          description: URI(s) to be used as named graphs (equivalent to USING NAMED)
        insert-graph-uri:
          type: string
          description: URI of the graph to be inserted into
        remove-graph-uri:
          type: string
          description: URI of the graph to be removed from
    SPARQL_RESULTS_JSON:
      required:
        - head
        - results
      properties:
        head:
          required:
            - vars
          properties:
            vars:
              type: array
              items:
                type: string
        results:
          required:
            - bindings
          properties:
            bindings:
              type: array
              items:
                additionalProperties:
                  required:
                    - type
                    - value
                  properties:
                    type:
                      type: string
                      example: literal
                    value:
                      type: string
                      example: '42'
    QUERY_PLAN_JSON:
      required:
        - prefixes
        - dataset
        - plan
      properties:
        prefixes:
          additionalProperties:
            type: string
        dataset:
          type: object
        plan:
          $ref: '#/components/schemas/PLAN_NODE'
    PLAN_NODE:
      properties:
        label:
          type: string
          example: MergeJoin(?s)
        cardinality:
          type: integer
          format: int64
          example: 42
        children:
          type: array
          items:
            $ref: '#/components/schemas/PLAN_NODE'
    DATABASE_LIST:
      required:
        - databases
      properties:
        databases:
          type: array
          items:
            type: string
    USER_LIST:
      required:
        - users
      properties:
        users:
          type: array
          items:
            type: string
    USER_CREATE:
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: array
          description: Array of chars
          items:
            maxLength: 1
            minLength: 1
            type: string
    USER_PASSWD:
      required:
        - password
      properties:
        password:
          type: string
    ROLE_LIST:
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            type: string
    ROLENAME:
      required:
        - rolename
      properties:
        rolename:
          type: string
    GENERIC_NAME:
      required:
        - name
      properties:
        name:
          type: string
    ENABLED:
      required:
        - enabled
      properties:
        enabled:
          type: boolean
    SUPERUSER:
      required:
        - superuser
      properties:
        superuser:
          type: boolean
    USER:
      required:
        - enabled
        - superuser
        - roles
        - permissions
      properties:
        enabled:
          type: boolean
        superuser:
          type: boolean
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PERMISSION_WITH_EXPLICIT'
    PERMISSION:
      required:
        - action
        - resource_type
        - resource
      properties:
        action:
          type: string
          enum:
            - read
            - write
            - create
            - delete
            - revoke
            - grant
            - execute
            - all
        resource_type:
          type: string
          enum:
            - ALL
            - USER
            - ROLE
            - ROLE_ASSIGNMENT
            - PERMISSION
            - DATABASE
            - NAMED_GRAPH
            - DATA_SOURCE
            - VIRTUAL_GRAPH
            - DBMS_ADMIN
            - DATABASE_METADATA
            - DATABASE_ADMIN
            - STORED_QUERY
            - SENSITIVE_PROPERTIES
            - ENTITY_RESOLUTION
        resource:
          type: array
          items:
            type: string
    PERMISSION_WITH_EXPLICIT:
      required:
        - action
        - resource_type
        - resource
      properties:
        action:
          type: string
          enum:
            - read
            - write
            - create
            - delete
            - revoke
            - grant
            - execute
            - all
        resource_type:
          type: string
          enum:
            - ALL
            - USER
            - ROLE
            - ROLE_ASSIGNMENT
            - PERMISSION
            - DATABASE
            - NAMED_GRAPH
            - DATA_SOURCE
            - VIRTUAL_GRAPH
            - DBMS_ADMIN
            - DATABASE_METADATA
            - DATABASE_ADMIN
            - STORED_QUERY
            - SENSITIVE_PROPERTIES
            - ENTITY_RESOLUTION
        resource:
          type: array
          items:
            type: string
        explicit:
          type: boolean
          description: Whether this permission is explicitly granted to the user versus granted via a role
    PERMISSION_LIST:
      required:
        - permissions
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PERMISSION'
    QUERY_LIST:
      required:
        - queries
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/QUERY'
    QUERY:
      required:
        - query
        - db
        - endTime
        - startTime
        - id
        - kernelId
        - timeout
        - user
        - reasoning
        - status
      properties:
        query:
          type: string
          example: 'SELECT * WHERE {?s ?p ?o}'
        db:
          type: string
          description: The database on which the query is running
        endTime:
          type: integer
          description: 'The UNIX timestamp at which the query ended, or -1 if it is still running'
          format: int64
        startTime:
          type: integer
          description: The UNIX timestamp when the query started running
          format: int64
        id:
          type: string
        kernelId:
          type: string
        timeout:
          type: integer
          description: 'The amount of time (in ms) after which the query will time out, or -1 if it will not time out'
          format: int64
        user:
          type: string
          description: The user that initiated the query
        reasoning:
          type: boolean
          description: Whether reasoning/inference is enabled on the query
        reasoningSchema:
          type: string
        status:
          type: string
          enum:
            - Not started
            - Pre-execution
            - Running
            - Terminating
            - Done
    PROCESS_LIST:
      required:
        - processes
      properties:
        processes:
          type: array
          items:
            $ref: '#/components/schemas/PROCESS'
    PROCESS:
      required:
        - type
        - db
        - endTime
        - startTime
        - id
        - user
        - status
      properties:
        type:
          type: string
          example: query
        db:
          type: string
          description: The database on which the query is running
        endTime:
          type: integer
          description: 'The UNIX timestamp at which the process ended, or -1 if it is still running'
          format: int64
        startTime:
          type: integer
          description: The UNIX timestamp when the process started running
          format: int64
        id:
          type: string
        user:
          type: string
          description: The user that initiated the query
        status:
          type: string
          enum:
            - Not started
            - Pre-execution
            - Running
            - Terminating
            - Done
    BITES_POST_DOC:
      properties:
        rdfExtractors:
          type: string
          example: 'tika,entities'
        testExtractors:
          type: string
          example: tika
        keyAssertions:
          type: boolean
          description: Whether named graph contents should be retained for the document if it already exists
      additionalProperties:
        type: string
        format: binary
    GRAPHQL_QUERY:
      type: string
      example: '{ Human { name } }'
    GRAPHQL_QUERY_POST:
      required:
        - query
      properties:
        query:
          $ref: '#/components/schemas/GRAPHQL_QUERY'
        operationName:
          type: string
        variables:
          type: object
    GRAPHQL_QUERY_RESULT:
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
    GRAPHQL_SCHEMAS:
      required:
        - schemas
      properties:
        schemas:
          type: array
          items:
            type: string
    ICV_SPARQL_QUERY:
      required:
        - query
      properties:
        query:
          type: string
          example: |-
            class Example {
                summary: null
                description: null
                value: null
                externalValue: null
                $ref: #/components/examples/ICV_SPARQL_QUERY
            }
    ICV_VALIDATION:
      required:
        - valid
      properties:
        valid:
          type: boolean
    SHACL_TARGETCLASS_SIMPLE:
      type: boolean
      description: 'If true, sh:targetClass will be evaluated based on rdf:type triples only, without following rdfs:subClassOf relations'
    CACHE_TARGET:
      required:
        - name
        - hostname
        - port
        - username
        - password
      properties:
        name:
          type: string
        hostname:
          type: string
        port:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        useExistingDb:
          type: boolean
          description: 'If true, check for an existing cache database to use before creating a new one'
          default: false
    CACHE_TARGET_LIST:
      type: array
      items:
        $ref: '#/components/schemas/CACHE_TARGET'
    CACHE_OBJ:
      required:
        - name
        - target
      properties:
        name:
          type: string
          format: URI
        target:
          type: string
        database:
          type: string
        refreshScript:
          type: string
          description: An optional SPARQL Insert query to run when refreshing the cache
        query:
          type: string
          description: Query to cache. Mutually exclusive with "graph"
        graph:
          type: string
          description: Graph to cache. Mutually exclusive with "query"
        registerOnly:
          type: boolean
          description: 'If true, register a cached dataset without loading data from the source graph or query into the cache target''s databases'
          default: false
    CACHE_QUERY_LIST:
      type: array
      items:
        properties:
          name:
            type: string
            format: URI
          target:
            $ref: '#/components/schemas/CACHE_TARGET'
          database:
            type: string
          refreshScript:
            type: string
            description: An optional SPARQL Insert query to run when refreshing the cache
          query:
            type: string
    CACHE_GRAPH_LIST:
      type: array
      items:
        properties:
          name:
            type: string
            format: URI
          target:
            $ref: '#/components/schemas/CACHE_TARGET'
          database:
            type: string
          refreshScript:
            type: string
            description: An optional SPARQL Insert query to run when refreshing the cache
          graph:
            type: string
    CACHE_STATUS_LIST:
      type: array
      items:
        properties:
          name:
            type: string
            format: URI
          type:
            type: string
            enum:
              - graph
              - query
          target:
            type: string
          size:
            type: integer
            format: int64
            example: 42
          lastRefresh:
            type: string
            format: date
    REASONING_PROOF:
      properties:
        status:
          type: string
          enum:
            - INFERRED
            - ASSERTED
            - VIOLATED
        expression:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/REASONING_PROOF'
        namedGraphs:
          type: array
          items:
            type: string
    REASONING_PROOF_LIST:
      required:
        - proofs
      properties:
        proofs:
          type: array
          items:
            $ref: '#/components/schemas/REASONING_PROOF'
    CONSISTENT:
      required:
        - consistent
      properties:
        consistent:
          type: boolean
    DATA_SOURCE:
      required:
        - name
        - sharable
        - available
      properties:
        entityName:
          type: string
        sharable:
          type: boolean
        available:
          type: boolean
    DATA_SOURCE_NAME_LIST:
      required:
        - data_sources
      properties:
        data_sources:
          type: array
          items:
            type: string
            example: 'data-source://myDS'
    DATA_SOURCE_LIST:
      required:
        - data_sources
      properties:
        data_sources:
          type: array
          items:
            $ref: '#/components/schemas/DATA_SOURCE'
    SINGLE_DATA_SOURCE_INFO:
      required:
        - info
      properties:
        info:
          $ref: '#/components/schemas/DATA_SOURCE'
    DATA_SOURCE_OPTIONS:
      properties:
        jdbc.url:
          type: string
          description: The URL of the JDBC connection
        jdbc.username:
          type: string
          description: The username used to make the JDBC connection
        jdbc.password:
          type: string
          description: The password used to make the JDBC connection
        jdbc.driver:
          type: string
          description: 'The driver class name used to make the JDBC connection. If omitted, driver will be taken from registered Service Providers.'
        mongodb.uri:
          type: string
          description: The URI for a MongoDB connection
        elasticsearch.rest.urls:
          type: string
          description: 'Whitespace-delimited list of connection `scheme://host:port` values for Elasticsearch. Scheme defaults to `http`.'
          example: 'https://server1:9200 http://server2:9200 server3:9200'
        elasticsearch.indexes:
          type: string
          description: Optional comma-delimited list of indexes to make visible to the data source. Defaults to all indexes.
          example: 'my_index1,other_index'
        elasticsearch.username:
          type: string
        elasticsearch.password:
          type: string
        cassandra.contact.point:
          type: string
          description: The address of the Cassandra node(s) that the driver uses to discover the cluster topology
        cassandra.port:
          type: integer
          description: The port to use to connect to the Cassandra host.
          format: int32
          example: 42
          default: 9042
        cassandra.keyspace:
          type: string
          description: The Cassandra keyspace to use for this session
        cassandra.username:
          type: string
          description: The username for the Cassandra cluster
        cassandra.password:
          type: string
          description: The password for the Cassandra cluster
        sparql.url:
          type: string
          description: SPARQL query endpoint/connection string with database specified
          format: URI
          example: 'http://myhost:26023/testdb/query'
        sparql.username:
          type: string
          description: The username to access the SPARQL endpoint
        sparql.password:
          type: string
          description: The password to access the SPARQL endpoint
        sparql.graphname:
          type: string
          description: The graph name on the SPARQL endpoint to be mapped as virtual graph
        unique.key.sets:
          type: string
          description: 'For data sources that do not express unique constraints in their metadata, either because unique constraints are not supported or because the data source did not include some or all of the valid constraints for reasons such as performance concerns, this property is used to define additional constraints manually. The property value is a comma-separated list of keys that define unique rows in a table. Each key is itself a comma-separated list of schema-qualified columns, enclosed in parentheses. For example, if table `APP.CUSTOMERS` has an `ID` column that serves as a primary key and a pair of columns, `FNAME` and `LNAME`, that together are a unique key, the value to express that is: `(APP.CUSTOMERS.ID),(APP.CUSTOMERS.FNAME,APP.CUSTOMERS.LNAME)`'
        sql.dialect:
          type: string
          description: 'The format of the generated SQL, for use when using an unsupported JDBC driver'
          example: MYSQL
        sql.schemas:
          type: string
          description: A comma-separated list of schemas to append to the schema search path
        sql.default.schema:
          type: string
          description: Override the default schema for the connected user
      additionalProperties:
        pattern: ext\..+
        type: string
        description: Additional properties to pass directly to the JDBC driver
      externalDocs:
        url: 'https://docs.stardog.com/virtual-graphs/virtual-graph-configuration#virtual-graph-properties'
    DATA_SOURCE_CREATE:
      required:
        - name
        - options
      properties:
        name:
          type: string
        options:
          $ref: '#/components/schemas/DATA_SOURCE_OPTIONS'
    DATA_SOURCE_UPDATE:
      required:
        - options
      properties:
        options:
          $ref: '#/components/schemas/DATA_SOURCE_OPTIONS'
    DATA_SOURCE_AVAILABLE:
      required:
        - available
      properties:
        available:
          type: boolean
    DATA_SOURCE_REFRESH_TABLE:
      properties:
        name:
          type: string
          description: 'Optional table to refresh. Example formats (case-sensitive): `catalog.schema.table`, `schema.table`, `table`'
    VIRTUAL_GRAPH:
      required:
        - name
        - available
      properties:
        name:
          type: string
        database:
          type: string
        available:
          type: boolean
    DATA_SOURCE_OPTION_DESCRIPTION:
      type: object
      properties:
        default:
          description: The default value for the option.
        type:
          type: string
          description: The data type of the option value
        description:
          type: string
          description: A description of the option
        examples:
          type: array
          description: 'List of all possible values, or a list with a single template or example value'
          items: {}
        required:
          type: boolean
          description: Whether the option is required for the family of data source types that support the option
          default: false
        optionGroup:
          type: string
          description: 'The name of the group of options that an option belongs to, if any'
          enum:
            - advanced options
            - connection pool options
    DATA_SOURCE_TYPE_DESCRIPTION:
      required:
        - data_source_type_description
      properties:
        data_source_type_description:
          required:
            - DATA_SOURCE_OPTIONS
            - VIRTUAL_GRAPH_OPTIONS
            - DATA_SOURCE_FAMILIES
            - DATA_SOURCE_TYPES
          type: object
          properties:
            DATA_SOURCE_OPTIONS:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/DATA_SOURCE_OPTION_DESCRIPTION'
              description: Map of data source option names to their descriptions
            VIRTUAL_GRAPH_OPTIONS:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/DATA_SOURCE_OPTION_DESCRIPTION'
              description: Map of virtual graph option names to their descriptions
            DATA_SOURCE_FAMILIES:
              type: object
              properties:
                DATA_SOURCE_OPTIONS:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/DATA_SOURCE_OPTION_DESCRIPTION'
                  description: Additional descriptions of data source options that are supported by this family
                VIRTUAL_GRAPH_OPTIONS:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/DATA_SOURCE_OPTION_DESCRIPTION'
                  description: Additional descriptions of virtual graph options that are supported by this family
              description: 'Map of data source type families - JDBC, CASSANDRA, etc.'
            DATA_SOURCE_TYPES:
              required:
                - label
                - dataSourceFamily
              type: object
              properties:
                label:
                  type: string
                  description: A display name for the data source type
                dataSourceFamily:
                  type: string
                  description: Which data source family this data source type belongs to
                  enum:
                    - CASSANDRA
                    - ELASTICSEARCH
                    - JDBC
                    - MONGODB
                    - SPARQL
                vendorClientDownloadUrl:
                  type: string
                  description: A link to where the client driver for the data source can be downloaded
                  format: URI
                vendorClientDocumentationUrl:
                  type: string
                  description: A link to the vendor documentation for the client driver
                  format: URI
                driverInstalled:
                  type: boolean
                  description: Whether the client driver for the data source was detected by Stardog
                DATA_SOURCE_OPTIONS:
                  type: object
                  properties:
                    jdbc.url:
                      type: object
                      properties:
                        examples:
                          type: array
                          description: Singleton list containing a template connection string
                          items:
                            type: string
                    jdbc.driver:
                      type: object
                      properties:
                        default:
                          type: string
                          description: Default value for the jdbc client driver class name
                  description: Additional descriptions for data source options for this data source type
              description: 'Map of data source types and their descriptions - ATHENA, ORACLE, CASSANDRA, MONGODB, etc.'
    VIRTUAL_GRAPH_NAME_LIST:
      required:
        - virtual_graphs
      properties:
        virtual_graphs:
          type: array
          items:
            type: string
            example: 'virtual://myVG'
    VIRTUAL_GRAPH_LIST:
      required:
        - virtual_graphs
      properties:
        virtual_graphs:
          type: array
          items:
            $ref: '#/components/schemas/VIRTUAL_GRAPH'
    SINGLE_VIRTUAL_GRAPH_INFO:
      required:
        - info
      properties:
        info:
          $ref: '#/components/schemas/VIRTUAL_GRAPH'
    VIRTUAL_GRAPH_OPTIONS:
      properties:
        base:
          type: string
          description: Base IRI used to resolve relative IRIs from virtual graphs
          format: URI
        jdbc.url:
          type: string
          description: The URL of the JDBC connection
        jdbc.username:
          type: string
          description: The username used to make the JDBC connection
        jdbc.password:
          type: string
          description: The password used to make the JDBC connection
        jdbc.driver:
          type: string
          description: 'The driver class name used to make the JDBC connection. If omitted, driver will be taken from registered Service Providers.'
        jdbc.statement.fetch.size:
          type: integer
          description: A hint as to the number of rows that should be fetched from the database at a time. Used to balance network traffic with memory use.
          format: int32
          example: 42
        mappings.syntax:
          type: string
          enum:
            - R2RML
            - STARDOG
            - SMS2
        mappings.format:
          type: string
          description: 'For R2RML, the RDF format of the mappings'
        mongodb.uri:
          type: string
          description: The URI for a MongoDB connection
        elasticsearch.rest.urls:
          type: string
          description: 'Whitespace-delimited list of connection `scheme://host:port` values for Elasticsearch. Scheme defaults to `http`.'
          example: 'https://server1:9200 http://server2:9200 server3:9200'
        elasticsearch.indexes:
          type: string
          description: Optional comma-delimited list of indexes to make visible to the data source. Defaults to all indexes.
          example: 'my_index1,other_index'
        elasticsearch.username:
          type: string
        elasticsearch.password:
          type: string
        cassandra.contact.point:
          type: string
          description: The address of the Cassandra node(s) that the driver uses to discover the cluster topology
        cassandra.port:
          type: integer
          description: The port to use to connect to the Cassandra host.
          format: int32
          example: 42
          default: 9042
        cassandra.keyspace:
          type: string
          description: The Cassandra keyspace to use for this session
        cassandra.username:
          type: string
          description: The username for the Cassandra cluster
        cassandra.password:
          type: string
          description: The password for the Cassandra cluster
        cassandra.allow.filtering:
          type: boolean
          description: Whether to include the `ALLOW FILTERING` clause at the end of Cassandra CQL queries. Not recommended for production use.
          default: false
        sparql.url:
          type: string
          description: SPARQL query endpoint/connection string with database specified
          format: URI
          example: 'http://myhost:26023/testdb/query'
        sparql.username:
          type: string
          description: The username to access the SPARQL endpoint
        sparql.password:
          type: string
          description: The password to access the SPARQL endpoint
        sparql.graphname:
          type: string
          description: The graph name on the SPARQL endpoint to be mapped as virtual graph
        sparql.statsbasedoptimization:
          type: boolean
          description: Whether to enable statistics-based optimization while accessing the SPARQL endpoint
          default: true
        parser.sql.quoting:
          type: string
          description: DB quoting convention used by the parser
          example: ANSI
        sql.functions:
          type: string
          description: A comma-separated list of SQL function names to register with the parser
        percent.encode:
          type: boolean
          description: Should IRI template strings be percent-encoded to be valid IRIs?
          default: true
        unique.key.sets:
          type: string
          description: 'For data sources that do not express unique constraints in their metadata, either because unique constraints are not supported or because the data source did not include some or all of the valid constraints for reasons such as performance concerns, this property is used to define additional constraints manually. The property value is a comma-separated list of keys that define unique rows in a table. Each key is itself a comma-separated list of schema-qualified columns, enclosed in parentheses. For example, if table `APP.CUSTOMERS` has an `ID` column that serves as a primary key and a pair of columns, `FNAME` and `LNAME`, that together are a unique key, the value to express that is: `(APP.CUSTOMERS.ID),(APP.CUSTOMERS.FNAME,APP.CUSTOMERS.LNAME)`'
        sql.dialect:
          type: string
          description: 'The format of the generated SQL, for use when using an unsupported JDBC driver'
          example: MYSQL
        sql.schemas:
          type: string
          description: A comma-separated list of schemas to append to the schema search path
        sql.default.schema:
          type: string
          description: Override the default schema for the connected user
        default.mapping.include.tables:
          type: string
          description: A comma-separated list of tables to include when generating default mappings. Incompatible with `default.mapping.exclude.tables`
        default.mapping.exclude.tables:
          type: string
          description: A comma-separated list of tables to exclude when generating default mappings. Incompatible with `default.mapping.include.tables`
        schema.in.generated.mappings:
          type: boolean
          description: Whether to include the name of the schema (along with the table name) in the templates for IRIs when automatically generating mappings
        union.strategy:
          type: string
          description: Strategy for translating SPARQL UNION to SQL. For use when using an unsupported JDBC driver.
          enum:
            - COALESCED
            - EMBEDDED
        charset.handling:
          type: boolean
          description: Whether to prefix SQL NVARCHAR string literals with N. The default is dialect-dependent. For use when using an unsupported JDBC driver.
      additionalProperties:
        pattern: ext\..+
        type: string
        description: Additional properties to pass directly to the JDBC driver
      externalDocs:
        url: 'https://docs.stardog.com/virtual-graphs/virtual-graph-configuration#virtual-graph-properties'
    IMPORT_FILE_OPTIONS:
      properties:
        csv.separator:
          type: string
          description: 'For CSV import, a single-character separator'
          default: ','
        csv.quote:
          type: string
          description: 'For CSV import, a single character used to encapsulate values containing special characters'
          default: '"'
        csv.header:
          type: boolean
          description: 'For CSV import, should the import process read the header row?'
          default: true
        csv.skip.empty:
          type: boolean
          description: 'For CSV import, should empty values be skipped?'
          default: true
        csv.class:
          type: string
          description: 'For CSV import, which class should imported rows be members of?'
        csv.hash.function:
          type: string
          description: 'For CSV import, which hash function should be used when the # notation is used?'
          default: SHA1
        unique.key.sets:
          type: string
          description: 'For data sources that do not express unique constraints in their metadata, either because unique constraints are not supported or because the data source did not include some or all of the valid constraints for reasons such as performance concerns, this property is used to define additional constraints manually. The property value is a comma-separated list of keys that define unique rows in a table. Each key is itself a comma-separated list of schema-qualified columns, enclosed in parentheses. For example, if table `APP.CUSTOMERS` has an `ID` column that serves as a primary key and a pair of columns, `FNAME` and `LNAME`, that together are a unique key, the value to express that is: `(APP.CUSTOMERS.ID),(APP.CUSTOMERS.FNAME,APP.CUSTOMERS.LNAME)`'
      externalDocs:
        url: 'https://docs.stardog.com/virtual-graphs/virtual-graph-configuration#virtual-graph-properties'
    VIRTUAL_GRAPH_CREATE:
      required:
        - name
        - mappings
      properties:
        name:
          type: string
        data_source:
          type: string
        db:
          type: string
          description: The database to associate with the virtual graph
        mappings:
          type: string
          description: 'The mappings from data source schema to RDF, or an empty string to generate the mappings'
        options:
          $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
    VIRTUAL_GRAPH_UPDATE:
      required:
        - mappings
      properties:
        data_source:
          type: string
        db:
          type: string
          description: The database to associate with the virtual graph
        mappings:
          type: string
          description: 'The mappings from data source schema to RDF, or an empty string to generate the mappings'
        options:
          $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
    VIRTUAL_GRAPH_IMPORT:
      required:
        - db
        - mappings
        - named_graph
        - remove_all
        - options
      properties:
        db:
          type: string
          description: The database into which to import the graph
        mappings:
          type: string
        data_source:
          type: string
        named_graph:
          type: string
        remove_all:
          type: boolean
          description: Should the target named graph be cleared before importing?
        options:
          $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
    VIRTUAL_GRAPH_AVAILABLE:
      required:
        - available
      properties:
        available:
          type: boolean
    VIRTUAL_GRAPH_IMPORT_FILE:
      required:
        - database
        - mappings
        - options
        - input_file_type
        - input_file
      properties:
        database:
          type: string
          description: The database into which to import the file
        mappings:
          type: string
        options:
          $ref: '#/components/schemas/IMPORT_FILE_OPTIONS'
        named_graph:
          type: string
          format: URI
        input_file_type:
          type: string
          enum:
            - JSON
            - DELIMITED
        input_file:
          type: string
    NODE_LIST:
      required:
        - nodes
      properties:
        nodes:
          type: array
          items:
            pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{3,5})?$'
            type: string
            example: '165.7.29.42:5820'
    CLUSTER_STATUS:
      properties:
        nodes:
          required:
            - nodes
          type: array
          items:
            required:
              - address
              - metadata
              - type
              - role
            properties:
              address:
                pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{3,5})?$'
                type: string
                example: '165.7.29.42:5820'
              metadata:
                type: object
              type:
                type: string
                enum:
                  - FULL
                  - STANDBY
              role:
                type: string
                enum:
                  - COORDINATOR
                  - PARTICIPANT
                  - STANDBY
    STANDBY_NODE_LIST:
      required:
        - standbynodes
      properties:
        standbynodes:
          type: array
          items:
            pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{3,5})?$'
            type: string
            example: '165.7.29.42:5820'
    STANDBY_PAUSED:
      required:
        - STATE
      properties:
        STATE:
          type: string
          enum:
            - WAITING
            - SYNCING
            - PAUSING
            - PAUSED
    STANDBY_STATUS:
      required:
        - address
        - state
        - readReplica
        - geoReplica
        - totalBytesToSync
        - syncCount
        - stardogVersion
        - syncIntervalMs
        - lastClusterAdminTx
        - lastStandbyNodeAdminTx
        - dbSyncBytes
      properties:
        address:
          type: string
        state:
          type: string
        readReplica:
          type: boolean
          description: Whether this is a read replica
          default: false
        geoReplica:
          type: boolean
          description: Whether this is a geo replica
          default: false
        totalBytesToSync:
          type: integer
          description: The total bytes estimated to sync
          format: int64
        syncCount:
          type: integer
          description: The number of times the standby has sync'd
          format: int64
        stardogVersion:
          type: string
        syncIntervalMs:
          type: integer
          description: The interval the standby node syncs (ms)
          format: int64
        lastClusterAdminTx:
          type: string
        lastStandbyNodeAdminTx:
          type: string
        dbSyncBytes:
          additionalProperties:
            type: integer
            format: int64
            example: 42
    CHECKPOINT_LIST:
      properties:
        checkpoints:
          type: array
          items:
            properties:
              checkpoint:
                type: string
                example: system_2021-05-14_02.34
              description:
                type: string
                example: Prior to 8.0.1 upgrade
    CHECKPOINT_CREATE:
      properties:
        description:
          type: string
          example: Prior to 8.0.2 upgrade
    CHECKPOINT_RESTORE:
      properties:
        checkpoint:
          type: string
          example: system_2021-05-14_04.56
    DATA_SOURCE_QUERY:
      properties:
        query:
          type: string
          description: Data source native query string
        options:
          $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
  responses:
    EMPTY_SUCCESS:
      description: Operation successful
    GENERIC_RESPONSE_MESSAGE:
      description: Operation successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_MESSAGE'
    GENERIC_RESPONSE_ERROR_MESSAGE:
      description: Error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    INVALID_QUERY:
      description: Invalid query sent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    ROLE_LIST:
      description: List of Roles in system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ROLE_LIST'
    USER_LIST:
      description: List of Users in system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER_LIST'
    MALFORMED_REQUEST_400:
      description: Malformed request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    PERMISSION_LIST:
      description: List of Permissions in system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PERMISSION_LIST'
    QUERY_LIST:
      description: List of Queries in system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QUERY_LIST'
    GRAPHQL_QUERY_RESULT:
      description: Result of GraphQL query
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GRAPHQL_QUERY_RESULT'
    REASONING_PROOF_LIST:
      description: List of reasoning proofs
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/REASONING_PROOF_LIST'
    SHACL_VALIDATION_REPORT:
      description: SHACL validation report
      content:
        text/turtle:
          examples:
            GENERIC_TURTLE:
              value: null
              $ref: '#/components/examples/GENERIC_TURTLE'
        application/trig:
          examples:
            GENERIC_TRIG:
              value: null
              $ref: '#/components/examples/GENERIC_TRIG'
        application/rdf+xml:
          examples:
            GENERIC_RDFXML:
              value: null
              $ref: '#/components/examples/GENERIC_RDFXML'
        application/n-triples:
          examples:
            GENERIC_NTRIPLES:
              value: null
              $ref: '#/components/examples/GENERIC_NTRIPLES'
        application/n-quads:
          examples:
            GENERIC_NQUADS:
              value: null
              $ref: '#/components/examples/GENERIC_NQUADS'
        application/ld+json:
          schema:
            $ref: '#/components/schemas/GENERIC_JSONLD'
        application/sparql-results+xml:
          examples:
            SPARQL_RESULTS_XML:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_XML'
        application/sparql-results+json:
          schema:
            $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
        text/csv:
          examples:
            SPARQL_RESULTS_CSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_CSV'
        text/tsv:
          examples:
            SPARQL_RESULTS_TSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_TSV'
    ICV_CONSTRAINT_VALIDATION:
      description: ICV Constraint Validation
      content:
        text/boolean:
          schema:
            $ref: '#/components/schemas/BOOLEAN'
        application/json:
          schema:
            $ref: '#/components/schemas/ICV_VALIDATION'
    ICV_CONSTRAINT_VIOLATIONS:
      description: ICV Constraint Violations
      content:
        multipart/mixed:
          examples:
            ICV_VIOLATIONS:
              value: null
              $ref: '#/components/examples/ICV_VIOLATIONS'
    DATABASE:
      description: RDF serialization of the database
      content:
        text/turtle:
          examples:
            GENERIC_TURTLE:
              value: null
              $ref: '#/components/examples/GENERIC_TURTLE'
        application/trig:
          examples:
            GENERIC_TRIG:
              value: null
              $ref: '#/components/examples/GENERIC_TRIG'
        application/rdf+xml:
          examples:
            GENERIC_RDFXML:
              value: null
              $ref: '#/components/examples/GENERIC_RDFXML'
        application/n-triples:
          examples:
            GENERIC_NTRIPLES:
              value: null
              $ref: '#/components/examples/GENERIC_NTRIPLES'
        application/n-quads:
          examples:
            GENERIC_NQUADS:
              value: null
              $ref: '#/components/examples/GENERIC_NQUADS'
        application/ld+json:
          schema:
            $ref: '#/components/schemas/GENERIC_JSONLD'
        application/sparql-results+xml:
          examples:
            SPARQL_RESULTS_XML:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_XML'
        application/sparql-results+json:
          schema:
            $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
        text/csv:
          examples:
            SPARQL_RESULTS_CSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_CSV'
        text/tsv:
          examples:
            SPARQL_RESULTS_TSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_TSV'
    DATABASE_OBF:
      description: Obfuscated RDF serialization of the database
      content:
        text/turtle:
          examples:
            GENERIC_TURTLE_OBF:
              value: null
              $ref: '#/components/examples/GENERIC_TURTLE_OBF'
        application/trig:
          examples:
            GENERIC_TRIG_OBF:
              value: null
              $ref: '#/components/examples/GENERIC_TRIG_OBF'
        application/rdf+xml:
          examples:
            GENERIC_RDFXML_OBF:
              value: null
              $ref: '#/components/examples/GENERIC_RDFXML_OBF'
        application/n-triples:
          examples:
            GENERIC_NTRIPLES_OBF:
              value: null
              $ref: '#/components/examples/GENERIC_NTRIPLES_OBF'
        application/n-quads:
          examples:
            GENERIC_NQUADS_OBF:
              value: null
              $ref: '#/components/examples/GENERIC_NQUADS_OBF'
        application/ld+json:
          schema:
            $ref: '#/components/schemas/GENERIC_JSONLD_OBF'
    REASONING_MODEL:
      description: RDF serialization of the reasoning model
      content:
        text/turtle:
          examples:
            GENERIC_TURTLE:
              value: null
              $ref: '#/components/examples/GENERIC_TURTLE'
        application/trig:
          examples:
            GENERIC_TRIG:
              value: null
              $ref: '#/components/examples/GENERIC_TRIG'
        application/rdf+xml:
          examples:
            GENERIC_RDFXML:
              value: null
              $ref: '#/components/examples/GENERIC_RDFXML'
        application/n-triples:
          examples:
            GENERIC_NTRIPLES:
              value: null
              $ref: '#/components/examples/GENERIC_NTRIPLES'
        application/n-quads:
          examples:
            GENERIC_NQUADS:
              value: null
              $ref: '#/components/examples/GENERIC_NQUADS'
        application/ld+json:
          schema:
            $ref: '#/components/schemas/GENERIC_JSONLD'
        application/sparql-results+xml:
          examples:
            SPARQL_RESULTS_XML:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_XML'
        application/sparql-results+json:
          schema:
            $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
        text/csv:
          examples:
            SPARQL_RESULTS_CSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_CSV'
        text/tsv:
          examples:
            SPARQL_RESULTS_TSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_TSV'
    NAMED_GRAPH:
      description: RDF serialization of the named graph
      content:
        text/turtle:
          examples:
            GENERIC_TURTLE:
              value: null
              $ref: '#/components/examples/GENERIC_TURTLE'
        application/trig:
          examples:
            GENERIC_TRIG:
              value: null
              $ref: '#/components/examples/GENERIC_TRIG'
        application/rdf+xml:
          examples:
            GENERIC_RDFXML:
              value: null
              $ref: '#/components/examples/GENERIC_RDFXML'
        application/n-triples:
          examples:
            GENERIC_NTRIPLES:
              value: null
              $ref: '#/components/examples/GENERIC_NTRIPLES'
        application/n-quads:
          examples:
            GENERIC_NQUADS:
              value: null
              $ref: '#/components/examples/GENERIC_NQUADS'
        application/ld+json:
          schema:
            $ref: '#/components/schemas/GENERIC_JSONLD'
        application/sparql-results+xml:
          examples:
            SPARQL_RESULTS_XML:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_XML'
        application/sparql-results+json:
          schema:
            $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
        text/csv:
          examples:
            SPARQL_RESULTS_CSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_CSV'
        text/tsv:
          examples:
            SPARQL_RESULTS_TSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_TSV'
    STORED_QUERIES:
      description: RDF serialization of server's stored queries
      content:
        text/turtle:
          examples:
            STORED_QUERY_TURTLE:
              value: null
              $ref: '#/components/examples/STORED_QUERY_TURTLE'
        application/trig:
          examples:
            STORED_QUERY_TRIG:
              value: null
              $ref: '#/components/examples/STORED_QUERY_TRIG'
        application/rdf+xml:
          examples:
            STORED_QUERY_RDFXML:
              value: null
              $ref: '#/components/examples/STORED_QUERY_RDFXML'
        application/n-triples:
          examples:
            STORED_QUERY_NTRIPLESQUADS:
              value: null
              $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
        application/n-quads:
          examples:
            STORED_QUERY_NTRIPLESQUADS:
              value: null
              $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
        application/ld+json: {}
    SPARQL_RESULTS:
      description: Query results
      content:
        text/turtle:
          examples:
            GENERIC_TURTLE:
              value: null
              $ref: '#/components/examples/GENERIC_TURTLE'
        application/trig:
          examples:
            GENERIC_TRIG:
              value: null
              $ref: '#/components/examples/GENERIC_TRIG'
        application/rdf+xml:
          examples:
            GENERIC_RDFXML:
              value: null
              $ref: '#/components/examples/GENERIC_RDFXML'
        application/n-triples:
          examples:
            GENERIC_NTRIPLES:
              value: null
              $ref: '#/components/examples/GENERIC_NTRIPLES'
        application/n-quads:
          examples:
            GENERIC_NQUADS:
              value: null
              $ref: '#/components/examples/GENERIC_NQUADS'
        application/ld+json:
          schema:
            $ref: '#/components/schemas/GENERIC_JSONLD'
        application/sparql-results+xml:
          examples:
            SPARQL_RESULTS_XML:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_XML'
        application/sparql-results+json:
          schema:
            $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
        text/csv:
          examples:
            SPARQL_RESULTS_CSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_CSV'
        text/tsv:
          examples:
            SPARQL_RESULTS_TSV:
              value: null
              $ref: '#/components/examples/SPARQL_RESULTS_TSV'
    PROCESS:
      description: Process
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PROCESS'
    PROCESS_LIST:
      description: List of Processes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PROCESS_LIST'
    NAME_FUNCTION_404:
      description: Stored function does not exist
      content:
        application/json:
          schema:
            required:
              - message
              - code
            properties:
              message:
                type: string
                example: Stored function does not exist
              code:
                type: string
                example: QEFNF2
    NAME_QUERY_404:
      description: Query does not exist
      content:
        application/json:
          schema:
            required:
              - message
              - code
            properties:
              message:
                type: string
                example: Query does not exist
              code:
                type: string
                example: QEQNF2
    NAME_STORED_QUERY_404:
      description: Stored query does not exist
      content:
        application/json:
          schema:
            required:
              - message
              - code
            properties:
              message:
                type: string
                example: Stored query does not exist
              code:
                type: string
                example: QEQNF2
    NAME_PROCESS_404:
      description: Process does not exist
      content:
        application/json:
          schema:
            required:
              - message
              - code
            properties:
              message:
                type: string
                example: Process does not exist
              code:
                type: string
                example: QEQNF2
    NAME_DOC_404:
      description: Document does not exist
      content:
        application/json:
          schema:
            required:
              - message
              - code
            properties:
              message:
                type: string
                example: Document does not exist
              code:
                type: string
                example: BIUDE2
    NAME_DS_404:
      description: Data Source does not exist
      content:
        text/plain:
          example: Data Source does not exist
    NAME_VG_404:
      description: Virtual Graph does not exist
      content:
        text/plain:
          example: Virtual Graph does not exist
    CHECKPOINT_LIST:
      description: Checkpoint List
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CHECKPOINT_LIST'
    CHECKPOINT_CREATE:
      description: Checkpoint Create
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CHECKPOINT_CREATE'
    CHECKPOINT_RESTORE:
      description: Checkpoint Restore
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CHECKPOINT_RESTORE'
    FUNCTIONALITY_NOT_SUPPORTED:
      description: Function not implemented
  parameters:
    db:
      name: db
      in: path
      description: Database name
      required: true
      schema:
        type: string
      example: myDb
    txid:
      name: txid
      in: path
      description: Transaction ID
      required: true
      schema:
        type: string
        format: uuid
        example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
    graph-uri:
      name: graph-uri
      in: query
      description: Named Graph / Context
      required: false
      schema:
        type: string
        format: URI
      example: 'https://stardog.com/graphs/myGraph'
    reasoning:
      name: reasoning
      in: query
      description: Enable Reasoning
      schema:
        type: boolean
    query:
      name: query
      in: query
      description: Query to run
      required: true
      schema:
        type: string
    profile:
      name: profile
      in: query
      description: Run query profiler
      schema:
        type: boolean
    verbose:
      name: verbose
      in: query
      description: Verbose output
      schema:
        type: boolean
    update:
      name: update
      in: query
      description: Update query to run (required only if 'query' is not present)
      required: true
      schema:
        type: string
    baseURI:
      name: baseURI
      in: query
      description: Base URI against which to resolve relative URIs
      schema:
        type: string
      example: 'tag:stardog:api:'
    timeout:
      name: timeout
      in: query
      description: The number of ms after which the query should timeout
      schema:
        type: integer
        format: int64
        example: 42
    limit:
      name: limit
      in: query
      description: The maximum number of results to return
      schema:
        type: integer
        format: int64
        example: 42
    offset:
      name: offset
      in: query
      description: How far into the result set to offset
      schema:
        type: integer
        format: int64
        example: 42
    user:
      name: user
      in: path
      description: Username
      required: true
      schema:
        type: string
    role:
      name: role
      in: path
      description: Role name
      required: true
      schema:
        type: string
    name_function:
      name: name
      in: path
      description: The name of the stored function
      required: true
      schema:
        type: string
    name_query:
      name: name
      in: path
      description: The name of the query
      required: true
      schema:
        type: string
    name_stored_query:
      name: name
      in: path
      description: The name of the stored query
      required: true
      schema:
        type: string
    name_process:
      name: name
      in: path
      description: The name of the process
      required: true
      schema:
        type: string
    name_doc:
      name: name
      in: path
      description: The name of the document
      required: true
      schema:
        type: string
    name_ds:
      name: name
      in: path
      description: The name of the data source
      required: true
      schema:
        type: string
    name_vg:
      name: name
      in: path
      description: The name of the virtual graph
      required: true
      schema:
        type: string
    name_schema:
      name: schema
      in: path
      description: The name of the schema
      required: true
      schema:
        type: string
    name_cache:
      name: name
      in: path
      description: The name of the cache
      required: true
      schema:
        type: string
    name_cache_target:
      name: name
      in: path
      description: The name of the cache target
      required: true
      schema:
        type: string
    name_cache_dataset:
      name: name
      in: path
      description: The name of the cache dataset
      required: true
      schema:
        type: string
    header_content_encoding:
      name: Content-Encoding
      in: header
      description: Allowable encodings for request body
      schema:
        type: string
        enum:
          - NONE
          - GZIP
          - BZIP2
          - ZIP
    schema:
      name: schema
      in: query
      description: The name of the schema
      schema:
        type: string
    useNamespaces:
      name: useNamespaces
      in: query
      description: Request query results with namespace substitution/prefix lines
      schema:
        type: boolean
    default-graph-uri:
      name: default-graph-uri
      in: query
      description: URI(s) to be used as the default graph (equivalent to FROM)
      schema:
        type: string
        format: URI
    named-graph-uri:
      name: named-graph-uri
      in: query
      description: URI(s) to be used as named graphs (equivalent to FROM NAMED)
      schema:
        type: string
        format: URI
    using-graph-uri:
      name: using-graph-uri
      in: query
      description: URI(s) to be used as the default graph (equivalent to USING)
      schema:
        type: string
        format: URI
    using-named-graph-uri:
      name: using-named-graph-uri
      in: query
      description: URI(s) to be used as named graphs (equivalent to USING NAMED)
      schema:
        type: string
        format: URI
    insert-graph-uri:
      name: insert-graph-uri
      in: query
      description: URI of the graph to be inserted into
      schema:
        type: string
        format: URI
    remove-graph-uri:
      name: remove-graph-uri
      in: query
      description: URI of the graph to be removed from
      schema:
        type: string
        format: URI
    standbyid:
      name: standbyid
      in: path
      description: The UUID of the standby node
      required: true
      schema:
        type: string
        format: uuid
        example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
  examples:
    GENERIC_TURTLE:
      value: "@prefix : <urn:example:> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix stardog: <tag:stardog:api:> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n<urn:example:Entity1> a <urn:example:Entity> ;\n\t<urn:example:hasProp> 42 ."
    GENERIC_TURTLE_OBF:
      value: |-
        @prefix : <http://api.stardog.com/> .
        @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
        @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
        @prefix owl: <http://www.w3.org/2002/07/owl#> .
        @prefix stardog: <tag:stardog:api:> .

        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> a <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> ;
           <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_TRIG:
      value: "@prefix : <urn:example:> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix stardog: <tag:stardog:api:> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n{ \t<urn:example:Entity1> a <urn:example:Entity> ;\n\t\t <urn:example:hasProp> 42 .\n}"
    GENERIC_TRIG_OBF:
      value: |-
        @prefix : <http://api.stardog.com/> .
        @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
        @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
        @prefix owl: <http://www.w3.org/2002/07/owl#> .
        @prefix stardog: <tag:stardog:api:> .

        {
            <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> a <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> ;
              <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
        }
    GENERIC_NTRIPLES:
      value: |-
        <urn:example:Entity1> a <urn:example:Entity> .
        <urn:example:Entity1> <urn:example:hasProp> 42 .
    GENERIC_NTRIPLES_OBF:
      value: |-
        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> .
        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_NQUADS:
      value: |-
        <urn:context> <urn:example:Entity1> a <urn:example:Entity> .
        <urn:context> <urn:example:Entity1> <urn:example:hasProp> 42 .
    GENERIC_NQUADS_OBF:
      value: |-
        <tag:stardog:api:obf:e603eb75c220e3110eb1d4143ffd6d3abd5679154b55b5d6354699b339940e8b> <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> .
        <tag:stardog:api:obf:e603eb75c220e3110eb1d4143ffd6d3abd5679154b55b5d6354699b339940e8b> <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns=\"http://api.stardog.com/\"\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:owl=\"http://www.w3.org/2002/07/owl#\"\n\txmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n\txmlns:stardog=\"tag:stardog:api:\"\n\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\">\n\n<rdf:Description rdf:about=\"urn:example:Entity1\">\n\t<rdf:type rdf:resource=\"urn:example:Entity\"/>\n\t<hasProp xmlns=\"urn:example:\" rdf:datatype=\"http://www.w3.org/2001/XMLSchema#integer\">42</hasProp>\n</rdf:Description>\n\n</rdf:RDF>"
    GENERIC_RDFXML_OBF:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns=\"http://api.stardog.com/\"\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:owl=\"http://www.w3.org/2002/07/owl#\"\n\txmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n\txmlns:stardog=\"tag:stardog:api:\"\n\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\">\n\n<rdf:Description rdf:about=\"tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154\">\n\t<rdf:type rdf:resource=\"tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42\"/>\n\t<d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7 xmlns=\"tag:stardog:api:obf:\" rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2</d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7>\n</rdf:Description>\n\n</rdf:RDF>"
    SPARQL_QUERY:
      value: |-
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX : <http://example.org/stardog#>
        
        SELECT ?s ?label WHERE {
            ?s a :Example ;
               rdfs:label ?label
        }
    SPARQL_UPDATE:
      value: |-
        PREFIX : <http://example.org/stardog#>

        DELETE {
           ?s a :OldType
        }
        INSERT {
           ?s a :NewType
        }
        WHERE {
           ?s a :OldType
        }
    SPARQL_RESULTS_XML:
      value: |-
        <?xml version='1.0' encoding='UTF-8'?>
        <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
            <head>
                <variable name='s'/>
                <variable name='label'/>
            </head>
            <results>
                <result>
                    <binding name='s'>
                        <uri>http://example.org/stardog#Example1</uri>
                    </binding>
                    <binding name='label'>
                        <literal>42</literal>
                    </binding>
                </result>
                <result>
                    <binding name='s'>
                        <uri>http://example.org/stardog#Example2</uri>
                    </binding>
                    <binding name='label'>
                        <literal>foo</literal>
                    </binding>
                </result>
            </results>
        </sparql>
    SPARQL_RESULTS_CSV:
      value: |-
        s,label
        http://example.org/stardog#Example1,42
        http://example.org/stardog#Example2,foo
    SPARQL_RESULTS_TSV:
      value: "?s\t?label\n<http://example.org/stardog#Example1>\t\"42\"\n<http://example.org/stardog#Example2>\t\"foo\""
    QUERY_PLAN_TEST:
      value: |-
        prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        prefix : <http://example.org/stardog#>

        Projection(?s, ?label) [#625]
        `â”€ MergeJoin(?s) [#625]
           +â”€ Scan[POSC](?s, <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>, :Example) [#1]
           `â”€ Scan[PSOC](?s, rdfs:label, ?label) [#718K]
    STORED_QUERY_TURTLE:
      value: |-
        @prefix system: <http://system.stardog.com/> .

        system:QuerymyQuery a system:StoredQuery, system:SharedQuery , system:ReasoningQuery ;
           system:queryName "myQuery" ;
           system:queryString "select * {?s ?p ?o}" ;
           system:queryCreator "admin" ;
           system:queryDatabase "myDb" .
    STORED_QUERY_TRIG:
      value: |-
        @prefix system: <http://system.stardog.com/> .

        {
            system:QuerymyQuery a system:StoredQuery , system:SharedQuery , system:ReasoningQuery ;
              system:queryName "myQuery" ;
              system:queryString "select * {?s ?p ?o}" ;
              system:queryCreator "admin" ;
              system:queryDatabase "myDb" .
        }
    STORED_QUERY_NTRIPLESQUADS:
      value: |-
        <http://system.stardog.com/QuerymyQuery> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://system.stardog.com/StoredQuery> .
        <http://system.stardog.com/QuerymyQuery> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://system.stardog.com/SharedQuery> . 
        <http://system.stardog.com/QuerymyQuery> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://system.stardog.com/ReasoningQuery> . 
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryName> "myQuery" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryString> "select * {?s ?p ?o}" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryCreator> "admin" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryDatabase> "myDb" .
    STORED_QUERY_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:system=\"http://system.stardog.com/\">\n    <rdf:Description rdf:about=\"http://system.stardog.com/QuerymyQuery\">\n        <rdf:type rdf:resource=\"http://system.stardog.com/StoredQuery\"/>\n        <rdf:type rdf:resource=\"http://system.stardog.com/SharedQuery\"/>\n        <rdf:type rdf:resource=\"http://system.stardog.com/ReasoningQuery\"/>\n        <system:queryName rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">myQuery</system:queryName>\n        <system:queryString rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">select * {?s ?p ?o}</system:queryString>\n        <system:queryCreator rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">admin</system:queryCreator>\n        <system:queryDatabase rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">myDb</system:queryDatabase>\n    </rdf:Description>\n</rdf:RDF>"
    STORED_FUNCTION:
      value: |-
        FUNCTION permutation(?n,?r) {
           (factorial(?n) / factorial((?n - ?r)))
        }
    PLAINTEXT_INT:
      value: '42'
    ICV_CONSTRAINT_TTL:
      value: '<urn:Employee> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <urn:Person> .'
    ICV_CONSTRAINT_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n    <rdf:Description rdf:about=\"urn:Employee\">\n        <subClassOf xmlns=\"http://www.w3.org/2000/01/rdf-schema#\" rdf:resource=\"urn:Person\"/>\n    </rdf:Description>\n</rdf:RDF>"
    ICV_CONSTRAINT_JSONLD:
      value: |-
        [
          {
            "@id": "urn:Employee",
            "http://www.w3.org/2000/01/rdf-schema#subClassOf": [
              {
                "@id": "urn:Person"
              }
            ]
          }
        ]
    REASONING_AXIOM_TTL:
      value: '<urn:Employee> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <urn:Person> .'
    REASONING_AXIOM_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n    <rdf:Description rdf:about=\"urn:Employee1\">\n        <rdf:type rdf:resource=\"urn:Person\"/>\n    </rdf:Description>\n</rdf:RDF>"
    REASONING_AXIOM_JSONLD:
      value: |-
        [
            {
                "@id": "urn:Employee1",
                "@type": [
                    "urn:Person"
                ]
            }
        ]
    ICV_SPARQL_QUERY:
      value: |-
        SELECT DISTINCT *
        FROM <tag:stardog:api:context:local>
        WHERE {
           ?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <urn:Employee> .
           FILTER NOT EXISTS {
              ?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <urn:Person> .
           }
        }
    GRAPHQL_SCHEMA:
      value: |
        type Author {
          id: Int!
          firstName: String
          lastName: String
          posts: [Post]
        }type Post {
          id: Int!
          title: String
          author: Author
          votes: Int
        }type Query {
          posts: [Post]
          author(id: Int!): Author
        }
    ICV_VIOLATIONS:
      value: "--myBoundary\nContent-Type: application/rdf+xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n\n<rdf:Description rdf:about=\"urn:Employee\">\n\t<rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#Class\"/>\n</rdf:Description>\n\n<rdf:Description rdf:about=\"urn:Person\">\n\t<rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#Class\"/>\n</rdf:Description>\n\n<rdf:Description rdf:about=\"urn:Employee\">\n\t<subClassOf xmlns=\"http://www.w3.org/2000/01/rdf-schema#\" rdf:resource=\"urn:Person\"/>\n</rdf:Description>\n\n</rdf:RDF>\n\n--myBoundary\nContent-Type: application/sparql-results+xml\n\n<?xml version='1.0' encoding='UTF-8'?><sparql xmlns='http://www.w3.org/2005/sparql-results#'><head><variable name='x0'/></head><results><result><binding name='x0'><uri>urn:Employee1</uri></binding></result></results></sparql>"
    OBFUSCATION_CONFIG:
      value: |-
        @prefix obf: <tag:stardog:api:obf:> .

        [] a obf:Obfuscation ;
            obf:digest "SHA-256" ;
            obf:include [
                obf:position obf:any ;
                obf:pattern ".*"
            ] ;

            obf:exclude [
                obf:position obf:any ;
                obf:namespace "rdf"
            ] ;
            obf:exclude [
                obf:position obf:any ;
                obf:namespace "owl"
            ] ;
            obf:exclude [
                obf:position obf:predicate ;
                obf:namespace "rdfs"
            ] ;
  requestBodies:
    ROLENAME:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ROLENAME'
    DB_OFFLINE_ONLINE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DB_OFFLINE_ONLINE'
    PERMISSION:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PERMISSION'
    DATA_SOURCE_OPTIONS:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DATA_SOURCE_OPTIONS'
    DATA_SOURCE_CREATE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DATA_SOURCE_CREATE'
    DATA_SOURCE_UPDATE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DATA_SOURCE_UPDATE'
    DATA_SOURCE_QUERY:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DATA_SOURCE_QUERY'
    DATA_SOURCE_REFRESH_TABLE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DATA_SOURCE_REFRESH_TABLE'
    VIRTUAL_GRAPH_CREATE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VIRTUAL_GRAPH_CREATE'
    VIRTUAL_GRAPH_UPDATE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VIRTUAL_GRAPH_UPDATE'
    GRAPHQL_SCHEMA:
      content:
        application/graphql:
          examples:
            GRAPHQL_SCHEMA:
              value: null
              $ref: '#/components/examples/GRAPHQL_SCHEMA'
    ICV_CONSTRAINT:
      description: The ICV constraint(s)
      content:
        text/turtle:
          examples:
            ICV_CONSTRAINT_TTL:
              value: null
              $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
        application/trig:
          examples:
            ICV_CONSTRAINT_TTL:
              value: null
              $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
        application/rdf+xml:
          examples:
            ICV_CONSTRAINT_RDFXML:
              value: null
              $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
        application/n-triples:
          examples:
            ICV_CONSTRAINT_TTL:
              value: null
              $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
        application/n-quads:
          examples:
            ICV_CONSTRAINT_TTL:
              value: null
              $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
        application/ld+json:
          examples:
            ICV_CONSTRAINT_JSONLD:
              value: null
              $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
      required: true
    RDF_REQUIRED:
      content:
        text/turtle:
          examples:
            GENERIC_TURTLE:
              value: null
              $ref: '#/components/examples/GENERIC_TURTLE'
        application/trig:
          examples:
            GENERIC_TRIG:
              value: null
              $ref: '#/components/examples/GENERIC_TRIG'
        application/rdf+xml:
          examples:
            GENERIC_RDFXML:
              value: null
              $ref: '#/components/examples/GENERIC_RDFXML'
        application/n-triples:
          examples:
            GENERIC_NTRIPLES:
              value: null
              $ref: '#/components/examples/GENERIC_NTRIPLES'
        application/n-quads:
          examples:
            GENERIC_NQUADS:
              value: null
              $ref: '#/components/examples/GENERIC_NQUADS'
        application/ld+json:
          schema:
            $ref: '#/components/schemas/GENERIC_JSONLD'
      required: true
    NAMED_GRAPH:
      description: RDF serialization of the named graph
      content:
        text/turtle:
          examples:
            GENERIC_TURTLE:
              value: null
              $ref: '#/components/examples/GENERIC_TURTLE'
        application/trig:
          examples:
            GENERIC_TRIG:
              value: null
              $ref: '#/components/examples/GENERIC_TRIG'
        application/rdf+xml:
          examples:
            GENERIC_RDFXML:
              value: null
              $ref: '#/components/examples/GENERIC_RDFXML'
        application/n-triples:
          examples:
            GENERIC_NTRIPLES:
              value: null
              $ref: '#/components/examples/GENERIC_NTRIPLES'
        application/n-quads:
          examples:
            GENERIC_NQUADS:
              value: null
              $ref: '#/components/examples/GENERIC_NQUADS'
        application/ld+json:
          schema:
            $ref: '#/components/schemas/GENERIC_JSONLD'
      required: true
    STORED_QUERY:
      description: RDF serialization of the stored query
      content:
        text/turtle:
          examples:
            STORED_QUERY_TURTLE:
              value: null
              $ref: '#/components/examples/STORED_QUERY_TURTLE'
        application/trig:
          examples:
            STORED_QUERY_TRIG:
              value: null
              $ref: '#/components/examples/STORED_QUERY_TRIG'
        application/rdf+xml:
          examples:
            STORED_QUERY_RDFXML:
              value: null
              $ref: '#/components/examples/STORED_QUERY_RDFXML'
        application/n-triples:
          examples:
            STORED_QUERY_NTRIPLESQUADS:
              value: null
              $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
        application/n-quads:
          examples:
            STORED_QUERY_NTRIPLESQUADS:
              value: null
              $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
        application/ld+json: {}
      required: true
x-tagGroups:
  - name: Data Unification
    tags:
      - Data Sources
      - Virtual Graphs
      - BITES
  - name: Virtual Graphs External Compute
    tags:
      - Virtual Graphs External Compute
  - name: Server
    tags:
      - Server Status/Metrics
      - Queries
      - Monitoring
      - Stored Functions
      - Server Admin
      - Cluster Admin
  - name: Database
    tags:
      - Checkpoints
      - DB Admin
      - Integrity Constraints / SHACL
      - Data Caching
      - Graph Store Protocol
      - 'Matcher, aligning schemas from various data sources'
      - Reasoning
      - Transactions
      - GraphQL
      - SPARQL
  - name: Security
    tags:
      - Permissions
      - Users
      - Roles
