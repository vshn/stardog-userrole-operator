// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Database database
//
// swagger:model Database
type Database struct {

	// root
	// Required: true
	Root *DatabaseRoot `json:"root"`

	// database
	// Format: binary
	Database map[string]io.ReadCloser `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *Database) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// root
		// Required: true
		Root *DatabaseRoot `json:"root"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv Database

	rcv.Root = stage1.Root
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "root")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]io.ReadCloser)
		for k, v := range stage2 {
			var toadd io.ReadCloser
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.Database = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m Database) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// root
		// Required: true
		Root *DatabaseRoot `json:"root"`
	}

	stage1.Root = m.Root

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.Database) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.Database)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this database
func (m *Database) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Database) validateRoot(formats strfmt.Registry) error {

	if err := validate.Required("root", "body", m.Root); err != nil {
		return err
	}

	if m.Root != nil {
		if err := m.Root.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("root")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("root")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this database based on the context it is used
func (m *Database) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Database) contextValidateRoot(ctx context.Context, formats strfmt.Registry) error {

	if m.Root != nil {

		if err := m.Root.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("root")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("root")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Database) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Database) UnmarshalBinary(b []byte) error {
	var res Database
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DatabaseRoot database root
// Example: {\"dbname\": \"myDb\", \"options\": {}, \"files\": [ {\"filename\": \"file1.ttl\"} ] }
//
// swagger:model DatabaseRoot
type DatabaseRoot struct {

	// dbname
	// Example: myDb
	// Required: true
	Dbname *string `json:"dbname"`

	// files
	// Required: true
	Files []*DatabaseRootFilesItems0 `json:"files"`

	// options
	// Required: true
	Options interface{} `json:"options"`
}

// Validate validates this database root
func (m *DatabaseRoot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseRoot) validateDbname(formats strfmt.Registry) error {

	if err := validate.Required("root"+"."+"dbname", "body", m.Dbname); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRoot) validateFiles(formats strfmt.Registry) error {

	if err := validate.Required("root"+"."+"files", "body", m.Files); err != nil {
		return err
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("root" + "." + "files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("root" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatabaseRoot) validateOptions(formats strfmt.Registry) error {

	if m.Options == nil {
		return errors.Required("root"+"."+"options", "body", nil)
	}

	return nil
}

// ContextValidate validate this database root based on the context it is used
func (m *DatabaseRoot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseRoot) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {

			if swag.IsZero(m.Files[i]) { // not required
				return nil
			}

			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("root" + "." + "files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("root" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseRoot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseRoot) UnmarshalBinary(b []byte) error {
	var res DatabaseRoot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DatabaseRootFilesItems0 database root files items0
//
// swagger:model DatabaseRootFilesItems0
type DatabaseRootFilesItems0 struct {

	// context
	// Example: urn:my:graph
	Context string `json:"context,omitempty"`

	// filename
	// Example: fileX.ttl
	// Required: true
	Filename *string `json:"filename"`
}

// Validate validates this database root files items0
func (m *DatabaseRootFilesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilename(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseRootFilesItems0) validateFilename(formats strfmt.Registry) error {

	if err := validate.Required("filename", "body", m.Filename); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this database root files items0 based on context it is used
func (m *DatabaseRootFilesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseRootFilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseRootFilesItems0) UnmarshalBinary(b []byte) error {
	var res DatabaseRootFilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
