// Package stardogrest implements the Azure ARM Stardogrest service API version 1.0.0.
package stardogrest

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Stardogrest
	DefaultBaseURI = "http://stardog-namespace:5820/admin"
)

// BaseClient is the base client for Stardogrest.
type BaseClient struct {
	autorest.Client
	BaseURI string
}

// New creates an instance of the BaseClient client.
func New() BaseClient {
	return NewWithBaseURI(DefaultBaseURI)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string) BaseClient {
	return BaseClient{
		Client:  autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI: baseURI,
	}
}

// AddRole sends the add role request.
// Parameters:
// userParameter - the username of the user who gets the new role
// role - the name of the role to add
func (client BaseClient) AddRole(ctx context.Context, userParameter string, role Rolename) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.AddRole")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: role,
			Constraints: []validation.Constraint{{Target: "role.Rolename", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "AddRole", err.Error())
	}

	req, err := client.AddRolePreparer(ctx, userParameter, role)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddRole", nil, "Failure preparing request")
		return
	}

	resp, err := client.AddRoleSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddRole", resp, "Failure sending request")
		return
	}

	result, err = client.AddRoleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddRole", resp, "Failure responding to request")
	}

	return
}

// AddRolePreparer prepares the AddRole request.
func (client BaseClient) AddRolePreparer(ctx context.Context, userParameter string, role Rolename) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}/roles", pathParameters),
		autorest.WithJSON(role))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AddRoleSender sends the AddRole request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) AddRoleSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// AddRoleResponder handles the response to the AddRole request. The method always
// closes the http.Response Body.
func (client BaseClient) AddRoleResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// AddRolePermission sends the add role permission request.
// Parameters:
// role - the role to add the permission to
// permission - the permission to add
func (client BaseClient) AddRolePermission(ctx context.Context, role string, permission Permission) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.AddRolePermission")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: permission,
			Constraints: []validation.Constraint{{Target: "permission.Action", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "permission.ResourceType", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "permission.Resource", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "AddRolePermission", err.Error())
	}

	req, err := client.AddRolePermissionPreparer(ctx, role, permission)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddRolePermission", nil, "Failure preparing request")
		return
	}

	resp, err := client.AddRolePermissionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddRolePermission", resp, "Failure sending request")
		return
	}

	result, err = client.AddRolePermissionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddRolePermission", resp, "Failure responding to request")
	}

	return
}

// AddRolePermissionPreparer prepares the AddRolePermission request.
func (client BaseClient) AddRolePermissionPreparer(ctx context.Context, role string, permission Permission) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"role": autorest.Encode("path", role),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/permissions/role/{role}", pathParameters),
		autorest.WithJSON(permission))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AddRolePermissionSender sends the AddRolePermission request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) AddRolePermissionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// AddRolePermissionResponder handles the response to the AddRolePermission request. The method always
// closes the http.Response Body.
func (client BaseClient) AddRolePermissionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// AddUserPermission sends the add user permission request.
// Parameters:
// userParameter - the user to add the permission to
// permission - the permission to add
func (client BaseClient) AddUserPermission(ctx context.Context, userParameter string, permission Permission) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.AddUserPermission")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: permission,
			Constraints: []validation.Constraint{{Target: "permission.Action", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "permission.ResourceType", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "permission.Resource", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "AddUserPermission", err.Error())
	}

	req, err := client.AddUserPermissionPreparer(ctx, userParameter, permission)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddUserPermission", nil, "Failure preparing request")
		return
	}

	resp, err := client.AddUserPermissionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddUserPermission", resp, "Failure sending request")
		return
	}

	result, err = client.AddUserPermissionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "AddUserPermission", resp, "Failure responding to request")
	}

	return
}

// AddUserPermissionPreparer prepares the AddUserPermission request.
func (client BaseClient) AddUserPermissionPreparer(ctx context.Context, userParameter string, permission Permission) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/permissions/user/{user}", pathParameters),
		autorest.WithJSON(permission))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AddUserPermissionSender sends the AddUserPermission request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) AddUserPermissionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// AddUserPermissionResponder handles the response to the AddUserPermission request. The method always
// closes the http.Response Body.
func (client BaseClient) AddUserPermissionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ChangePassword sends the change password request.
// Parameters:
// userParameter - the username of the user whose password should be changed
// password - the new password
func (client BaseClient) ChangePassword(ctx context.Context, userParameter string, password Password) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ChangePassword")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: password,
			Constraints: []validation.Constraint{{Target: "password.Password", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "ChangePassword", err.Error())
	}

	req, err := client.ChangePasswordPreparer(ctx, userParameter, password)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ChangePassword", nil, "Failure preparing request")
		return
	}

	resp, err := client.ChangePasswordSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ChangePassword", resp, "Failure sending request")
		return
	}

	result, err = client.ChangePasswordResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ChangePassword", resp, "Failure responding to request")
	}

	return
}

// ChangePasswordPreparer prepares the ChangePassword request.
func (client BaseClient) ChangePasswordPreparer(ctx context.Context, userParameter string, password Password) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}/pwd", pathParameters),
		autorest.WithJSON(password))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ChangePasswordSender sends the ChangePassword request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ChangePasswordSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ChangePasswordResponder handles the response to the ChangePassword request. The method always
// closes the http.Response Body.
func (client BaseClient) ChangePasswordResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// CreateRole sends the create role request.
// Parameters:
// role - the role to create.
func (client BaseClient) CreateRole(ctx context.Context, role *Rolename) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CreateRole")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: role,
			Constraints: []validation.Constraint{{Target: "role", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "role.Rolename", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "CreateRole", err.Error())
	}

	req, err := client.CreateRolePreparer(ctx, role)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "CreateRole", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateRoleSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "CreateRole", resp, "Failure sending request")
		return
	}

	result, err = client.CreateRoleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "CreateRole", resp, "Failure responding to request")
	}

	return
}

// CreateRolePreparer prepares the CreateRole request.
func (client BaseClient) CreateRolePreparer(ctx context.Context, role *Rolename) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/roles"))
	if role != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(role))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateRoleSender sends the CreateRole request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateRoleSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateRoleResponder handles the response to the CreateRole request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateRoleResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// CreateUser sends the create user request.
// Parameters:
// userParameter - the user to create.
func (client BaseClient) CreateUser(ctx context.Context, userParameter *User) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CreateUser")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: userParameter,
			Constraints: []validation.Constraint{{Target: "userParameter", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "userParameter.Username", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "userParameter.Superuser", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "userParameter.Password", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "CreateUser", err.Error())
	}

	req, err := client.CreateUserPreparer(ctx, userParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "CreateUser", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateUserSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "CreateUser", resp, "Failure sending request")
		return
	}

	result, err = client.CreateUserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "CreateUser", resp, "Failure responding to request")
	}

	return
}

// CreateUserPreparer prepares the CreateUser request.
func (client BaseClient) CreateUserPreparer(ctx context.Context, userParameter *User) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/users"))
	if userParameter != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(userParameter))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateUserSender sends the CreateUser request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateUserSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateUserResponder handles the response to the CreateUser request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateUserResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// IsEnabled sends the is enabled request.
// Parameters:
// userParameter - the username of the user whose status should be queried
func (client BaseClient) IsEnabled(ctx context.Context, userParameter string) (result Enabled, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.IsEnabled")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.IsEnabledPreparer(ctx, userParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "IsEnabled", nil, "Failure preparing request")
		return
	}

	resp, err := client.IsEnabledSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "IsEnabled", resp, "Failure sending request")
		return
	}

	result, err = client.IsEnabledResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "IsEnabled", resp, "Failure responding to request")
	}

	return
}

// IsEnabledPreparer prepares the IsEnabled request.
func (client BaseClient) IsEnabledPreparer(ctx context.Context, userParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}/enabled", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// IsEnabledSender sends the IsEnabled request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) IsEnabledSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// IsEnabledResponder handles the response to the IsEnabled request. The method always
// closes the http.Response Body.
func (client BaseClient) IsEnabledResponder(resp *http.Response) (result Enabled, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// IsSuperuser sends the is superuser request.
// Parameters:
// userParameter - the username of the user whose status should be queried
func (client BaseClient) IsSuperuser(ctx context.Context, userParameter string) (result Superuser, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.IsSuperuser")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.IsSuperuserPreparer(ctx, userParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "IsSuperuser", nil, "Failure preparing request")
		return
	}

	resp, err := client.IsSuperuserSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "IsSuperuser", resp, "Failure sending request")
		return
	}

	result, err = client.IsSuperuserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "IsSuperuser", resp, "Failure responding to request")
	}

	return
}

// IsSuperuserPreparer prepares the IsSuperuser request.
func (client BaseClient) IsSuperuserPreparer(ctx context.Context, userParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}/superuser", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// IsSuperuserSender sends the IsSuperuser request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) IsSuperuserSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// IsSuperuserResponder handles the response to the IsSuperuser request. The method always
// closes the http.Response Body.
func (client BaseClient) IsSuperuserResponder(resp *http.Response) (result Superuser, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListEffectivePermissions sends the list effective permissions request.
// Parameters:
// userParameter - the name of the user whose permissions should be listed
func (client BaseClient) ListEffectivePermissions(ctx context.Context, userParameter string) (result Permissions, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ListEffectivePermissions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListEffectivePermissionsPreparer(ctx, userParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListEffectivePermissions", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListEffectivePermissionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListEffectivePermissions", resp, "Failure sending request")
		return
	}

	result, err = client.ListEffectivePermissionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListEffectivePermissions", resp, "Failure responding to request")
	}

	return
}

// ListEffectivePermissionsPreparer prepares the ListEffectivePermissions request.
func (client BaseClient) ListEffectivePermissionsPreparer(ctx context.Context, userParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/permissions/effective/user/{user}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListEffectivePermissionsSender sends the ListEffectivePermissions request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ListEffectivePermissionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListEffectivePermissionsResponder handles the response to the ListEffectivePermissions request. The method always
// closes the http.Response Body.
func (client BaseClient) ListEffectivePermissionsResponder(resp *http.Response) (result Permissions, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListRolePermissions sends the list role permissions request.
// Parameters:
// role - the name of the role whose permissions should be listed
func (client BaseClient) ListRolePermissions(ctx context.Context, role string) (result Permissions, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ListRolePermissions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListRolePermissionsPreparer(ctx, role)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRolePermissions", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListRolePermissionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRolePermissions", resp, "Failure sending request")
		return
	}

	result, err = client.ListRolePermissionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRolePermissions", resp, "Failure responding to request")
	}

	return
}

// ListRolePermissionsPreparer prepares the ListRolePermissions request.
func (client BaseClient) ListRolePermissionsPreparer(ctx context.Context, role string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"role": autorest.Encode("path", role),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/permissions/role/{role}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListRolePermissionsSender sends the ListRolePermissions request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ListRolePermissionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListRolePermissionsResponder handles the response to the ListRolePermissions request. The method always
// closes the http.Response Body.
func (client BaseClient) ListRolePermissionsResponder(resp *http.Response) (result Permissions, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListRoles sends the list roles request.
func (client BaseClient) ListRoles(ctx context.Context) (result Roles, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ListRoles")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListRolesPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRoles", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListRolesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRoles", resp, "Failure sending request")
		return
	}

	result, err = client.ListRolesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRoles", resp, "Failure responding to request")
	}

	return
}

// ListRolesPreparer prepares the ListRoles request.
func (client BaseClient) ListRolesPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/roles"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListRolesSender sends the ListRoles request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ListRolesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListRolesResponder handles the response to the ListRoles request. The method always
// closes the http.Response Body.
func (client BaseClient) ListRolesResponder(resp *http.Response) (result Roles, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListRoleUsers sends the list role users request.
// Parameters:
// role - the role name of the role whose users should be listed
func (client BaseClient) ListRoleUsers(ctx context.Context, role string) (result Users, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ListRoleUsers")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListRoleUsersPreparer(ctx, role)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRoleUsers", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListRoleUsersSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRoleUsers", resp, "Failure sending request")
		return
	}

	result, err = client.ListRoleUsersResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListRoleUsers", resp, "Failure responding to request")
	}

	return
}

// ListRoleUsersPreparer prepares the ListRoleUsers request.
func (client BaseClient) ListRoleUsersPreparer(ctx context.Context, role string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"role": autorest.Encode("path", role),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/roles/{role}/users", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListRoleUsersSender sends the ListRoleUsers request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ListRoleUsersSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListRoleUsersResponder handles the response to the ListRoleUsers request. The method always
// closes the http.Response Body.
func (client BaseClient) ListRoleUsersResponder(resp *http.Response) (result Users, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListUserPermissions sends the list user permissions request.
// Parameters:
// userParameter - the name of the user whose permissions should be listed
func (client BaseClient) ListUserPermissions(ctx context.Context, userParameter string) (result Permissions, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ListUserPermissions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListUserPermissionsPreparer(ctx, userParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUserPermissions", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListUserPermissionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUserPermissions", resp, "Failure sending request")
		return
	}

	result, err = client.ListUserPermissionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUserPermissions", resp, "Failure responding to request")
	}

	return
}

// ListUserPermissionsPreparer prepares the ListUserPermissions request.
func (client BaseClient) ListUserPermissionsPreparer(ctx context.Context, userParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/permissions/user/{user}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListUserPermissionsSender sends the ListUserPermissions request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ListUserPermissionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListUserPermissionsResponder handles the response to the ListUserPermissions request. The method always
// closes the http.Response Body.
func (client BaseClient) ListUserPermissionsResponder(resp *http.Response) (result Permissions, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListUserRoles sends the list user roles request.
// Parameters:
// userParameter - the username of the user whose roles should be listed
func (client BaseClient) ListUserRoles(ctx context.Context, userParameter string) (result Roles, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ListUserRoles")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListUserRolesPreparer(ctx, userParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUserRoles", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListUserRolesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUserRoles", resp, "Failure sending request")
		return
	}

	result, err = client.ListUserRolesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUserRoles", resp, "Failure responding to request")
	}

	return
}

// ListUserRolesPreparer prepares the ListUserRoles request.
func (client BaseClient) ListUserRolesPreparer(ctx context.Context, userParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}/roles", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListUserRolesSender sends the ListUserRoles request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ListUserRolesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListUserRolesResponder handles the response to the ListUserRoles request. The method always
// closes the http.Response Body.
func (client BaseClient) ListUserRolesResponder(resp *http.Response) (result Roles, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListUsers sends the list users request.
func (client BaseClient) ListUsers(ctx context.Context) (result Users, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ListUsers")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListUsersPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUsers", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListUsersSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUsers", resp, "Failure sending request")
		return
	}

	result, err = client.ListUsersResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ListUsers", resp, "Failure responding to request")
	}

	return
}

// ListUsersPreparer prepares the ListUsers request.
func (client BaseClient) ListUsersPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/users"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListUsersSender sends the ListUsers request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ListUsersSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListUsersResponder handles the response to the ListUsers request. The method always
// closes the http.Response Body.
func (client BaseClient) ListUsersResponder(resp *http.Response) (result Users, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutRoles sends the put roles request.
// Parameters:
// userParameter - the username of the user whose roles should be changed
// roles - the new set of roles
func (client BaseClient) PutRoles(ctx context.Context, userParameter string, roles Roles) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.PutRoles")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: roles,
			Constraints: []validation.Constraint{{Target: "roles.Roles", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "PutRoles", err.Error())
	}

	req, err := client.PutRolesPreparer(ctx, userParameter, roles)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "PutRoles", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutRolesSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "PutRoles", resp, "Failure sending request")
		return
	}

	result, err = client.PutRolesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "PutRoles", resp, "Failure responding to request")
	}

	return
}

// PutRolesPreparer prepares the PutRoles request.
func (client BaseClient) PutRolesPreparer(ctx context.Context, userParameter string, roles Roles) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}/roles", pathParameters),
		autorest.WithJSON(roles))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PutRolesSender sends the PutRoles request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PutRolesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutRolesResponder handles the response to the PutRoles request. The method always
// closes the http.Response Body.
func (client BaseClient) PutRolesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// RemoveRole sends the remove role request.
// Parameters:
// userParameter - the username of the user whose role should be removed
// role - the name of the role to remove
func (client BaseClient) RemoveRole(ctx context.Context, userParameter string, role string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.RemoveRole")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RemoveRolePreparer(ctx, userParameter, role)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRole", nil, "Failure preparing request")
		return
	}

	resp, err := client.RemoveRoleSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRole", resp, "Failure sending request")
		return
	}

	result, err = client.RemoveRoleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRole", resp, "Failure responding to request")
	}

	return
}

// RemoveRolePreparer prepares the RemoveRole request.
func (client BaseClient) RemoveRolePreparer(ctx context.Context, userParameter string, role string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"role": autorest.Encode("path", role),
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}/roles/{role}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RemoveRoleSender sends the RemoveRole request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) RemoveRoleSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RemoveRoleResponder handles the response to the RemoveRole request. The method always
// closes the http.Response Body.
func (client BaseClient) RemoveRoleResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// RemoveRole1 sends the remove role 1 request.
// Parameters:
// role - the name of the role to delete
// force - whether to delete even if in use
func (client BaseClient) RemoveRole1(ctx context.Context, role string, force *bool) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.RemoveRole1")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RemoveRole1Preparer(ctx, role, force)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRole1", nil, "Failure preparing request")
		return
	}

	resp, err := client.RemoveRole1Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRole1", resp, "Failure sending request")
		return
	}

	result, err = client.RemoveRole1Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRole1", resp, "Failure responding to request")
	}

	return
}

// RemoveRole1Preparer prepares the RemoveRole1 request.
func (client BaseClient) RemoveRole1Preparer(ctx context.Context, role string, force *bool) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"role": autorest.Encode("path", role),
	}

	queryParameters := map[string]interface{}{}
	if force != nil {
		queryParameters["force"] = autorest.Encode("query", *force)
	} else {
		queryParameters["force"] = autorest.Encode("query", true)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/roles/{role}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RemoveRole1Sender sends the RemoveRole1 request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) RemoveRole1Sender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RemoveRole1Responder handles the response to the RemoveRole1 request. The method always
// closes the http.Response Body.
func (client BaseClient) RemoveRole1Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// RemoveRolePermission sends the remove role permission request.
// Parameters:
// role - the role to remove the permission from
// permission - the permission to remove
func (client BaseClient) RemoveRolePermission(ctx context.Context, role string, permission Permission) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.RemoveRolePermission")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: permission,
			Constraints: []validation.Constraint{{Target: "permission.Action", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "permission.ResourceType", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "permission.Resource", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "RemoveRolePermission", err.Error())
	}

	req, err := client.RemoveRolePermissionPreparer(ctx, role, permission)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRolePermission", nil, "Failure preparing request")
		return
	}

	resp, err := client.RemoveRolePermissionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRolePermission", resp, "Failure sending request")
		return
	}

	result, err = client.RemoveRolePermissionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveRolePermission", resp, "Failure responding to request")
	}

	return
}

// RemoveRolePermissionPreparer prepares the RemoveRolePermission request.
func (client BaseClient) RemoveRolePermissionPreparer(ctx context.Context, role string, permission Permission) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"role": autorest.Encode("path", role),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/permissions/role/{role}/delete", pathParameters),
		autorest.WithJSON(permission))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RemoveRolePermissionSender sends the RemoveRolePermission request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) RemoveRolePermissionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RemoveRolePermissionResponder handles the response to the RemoveRolePermission request. The method always
// closes the http.Response Body.
func (client BaseClient) RemoveRolePermissionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// RemoveUser sends the remove user request.
// Parameters:
// userParameter - the username of the user to delete
func (client BaseClient) RemoveUser(ctx context.Context, userParameter string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.RemoveUser")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RemoveUserPreparer(ctx, userParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveUser", nil, "Failure preparing request")
		return
	}

	resp, err := client.RemoveUserSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveUser", resp, "Failure sending request")
		return
	}

	result, err = client.RemoveUserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveUser", resp, "Failure responding to request")
	}

	return
}

// RemoveUserPreparer prepares the RemoveUser request.
func (client BaseClient) RemoveUserPreparer(ctx context.Context, userParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RemoveUserSender sends the RemoveUser request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) RemoveUserSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RemoveUserResponder handles the response to the RemoveUser request. The method always
// closes the http.Response Body.
func (client BaseClient) RemoveUserResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// RemoveUserPermission sends the remove user permission request.
// Parameters:
// userParameter - the user to remove the permission from
// permission - the permission to remove
func (client BaseClient) RemoveUserPermission(ctx context.Context, userParameter string, permission Permission) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.RemoveUserPermission")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: permission,
			Constraints: []validation.Constraint{{Target: "permission.Action", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "permission.ResourceType", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "permission.Resource", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "RemoveUserPermission", err.Error())
	}

	req, err := client.RemoveUserPermissionPreparer(ctx, userParameter, permission)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveUserPermission", nil, "Failure preparing request")
		return
	}

	resp, err := client.RemoveUserPermissionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveUserPermission", resp, "Failure sending request")
		return
	}

	result, err = client.RemoveUserPermissionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "RemoveUserPermission", resp, "Failure responding to request")
	}

	return
}

// RemoveUserPermissionPreparer prepares the RemoveUserPermission request.
func (client BaseClient) RemoveUserPermissionPreparer(ctx context.Context, userParameter string, permission Permission) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/permissions/user/{user}/delete", pathParameters),
		autorest.WithJSON(permission))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RemoveUserPermissionSender sends the RemoveUserPermission request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) RemoveUserPermissionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RemoveUserPermissionResponder handles the response to the RemoveUserPermission request. The method always
// closes the http.Response Body.
func (client BaseClient) RemoveUserPermissionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// SetEnabled sends the set enabled request.
// Parameters:
// userParameter - the username of the user whose status should be changed
// enable - the enabled status
func (client BaseClient) SetEnabled(ctx context.Context, userParameter string, enable Enabled) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.SetEnabled")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: enable,
			Constraints: []validation.Constraint{{Target: "enable.Enabled", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("stardogrest.BaseClient", "SetEnabled", err.Error())
	}

	req, err := client.SetEnabledPreparer(ctx, userParameter, enable)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "SetEnabled", nil, "Failure preparing request")
		return
	}

	resp, err := client.SetEnabledSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "SetEnabled", resp, "Failure sending request")
		return
	}

	result, err = client.SetEnabledResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "SetEnabled", resp, "Failure responding to request")
	}

	return
}

// SetEnabledPreparer prepares the SetEnabled request.
func (client BaseClient) SetEnabledPreparer(ctx context.Context, userParameter string, enable Enabled) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"user": autorest.Encode("path", userParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/users/{user}/enabled", pathParameters),
		autorest.WithJSON(enable))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SetEnabledSender sends the SetEnabled request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) SetEnabledSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// SetEnabledResponder handles the response to the SetEnabled request. The method always
// closes the http.Response Body.
func (client BaseClient) SetEnabledResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ValidateUser sends the validate user request.
func (client BaseClient) ValidateUser(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ValidateUser")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ValidateUserPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ValidateUser", nil, "Failure preparing request")
		return
	}

	resp, err := client.ValidateUserSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ValidateUser", resp, "Failure sending request")
		return
	}

	result, err = client.ValidateUserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stardogrest.BaseClient", "ValidateUser", resp, "Failure responding to request")
	}

	return
}

// ValidateUserPreparer prepares the ValidateUser request.
func (client BaseClient) ValidateUserPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/users/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ValidateUserSender sends the ValidateUser request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ValidateUserSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ValidateUserResponder handles the response to the ValidateUser request. The method always
// closes the http.Response Body.
func (client BaseClient) ValidateUserResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
